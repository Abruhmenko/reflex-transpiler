/*
 * generated by Xtext 2.25.0
 */
package ru.iaie.reflexold.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReflexOldGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEnAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cEnPROGRKeyword_0_0_0 = (Keyword)cEnAssignment_0_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterGheCyrillicCapitalLetterErKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClockClockDefinitionParserRuleCall_3_0 = (RuleCall)cClockAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cConstsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cConstsConstParserRuleCall_4_0_0 = (RuleCall)cConstsAssignment_4_0.eContents().get(0);
		private final Assignment cEnumsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cEnumsEnumParserRuleCall_4_1_0 = (RuleCall)cEnumsAssignment_4_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_4_2_0 = (RuleCall)cFunctionsAssignment_4_2.eContents().get(0);
		private final Assignment cPortsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cPortsPortParserRuleCall_4_3_0 = (RuleCall)cPortsAssignment_4_3.eContents().get(0);
		private final Assignment cProcessesAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cProcessesProcessParserRuleCall_4_4_0 = (RuleCall)cProcessesAssignment_4_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Program:
		//    (en?="PROGR" | "œ–Œ√–") name=ID "{"
		//    clock=ClockDefinition
		//    (consts+=Const |
		//    enums+=Enum |
		//    functions+=Function |
		//    ports+=Port |
		//    processes+=Process)*
		//    "}";
		@Override public ParserRule getRule() { return rule; }
		
		//(en?="PROGR" | "œ–Œ√–") name=ID "{"
		//clock=ClockDefinition
		//(consts+=Const |
		//enums+=Enum |
		//functions+=Function |
		//ports+=Port |
		//processes+=Process)*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//(en?="PROGR" | "œ–Œ√–")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//en?="PROGR"
		public Assignment getEnAssignment_0_0() { return cEnAssignment_0_0; }
		
		//"PROGR"
		public Keyword getEnPROGRKeyword_0_0_0() { return cEnPROGRKeyword_0_0_0; }
		
		//"œ–Œ√–"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterGheCyrillicCapitalLetterErKeyword_0_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterGheCyrillicCapitalLetterErKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//clock=ClockDefinition
		public Assignment getClockAssignment_3() { return cClockAssignment_3; }
		
		//ClockDefinition
		public RuleCall getClockClockDefinitionParserRuleCall_3_0() { return cClockClockDefinitionParserRuleCall_3_0; }
		
		//(consts+=Const |
		//enums+=Enum |
		//functions+=Function |
		//ports+=Port |
		//processes+=Process)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//consts+=Const
		public Assignment getConstsAssignment_4_0() { return cConstsAssignment_4_0; }
		
		//Const
		public RuleCall getConstsConstParserRuleCall_4_0_0() { return cConstsConstParserRuleCall_4_0_0; }
		
		//enums+=Enum
		public Assignment getEnumsAssignment_4_1() { return cEnumsAssignment_4_1; }
		
		//Enum
		public RuleCall getEnumsEnumParserRuleCall_4_1_0() { return cEnumsEnumParserRuleCall_4_1_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_4_2() { return cFunctionsAssignment_4_2; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_4_2_0() { return cFunctionsFunctionParserRuleCall_4_2_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_4_3() { return cPortsAssignment_4_3; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_4_3_0() { return cPortsPortParserRuleCall_4_3_0; }
		
		//processes+=Process
		public Assignment getProcessesAssignment_4_4() { return cProcessesAssignment_4_4; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_4_4_0() { return cProcessesProcessParserRuleCall_4_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ClockDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ClockDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTACTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterTeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClockDefinition:
		//    ("TACT" | "“¿ “") value=INTEGER ";";
		@Override public ParserRule getRule() { return rule; }
		
		//("TACT" | "“¿ “") value=INTEGER ";"
		public Group getGroup() { return cGroup; }
		
		//("TACT" | "“¿ “")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"TACT"
		public Keyword getTACTKeyword_0_0() { return cTACTKeyword_0_0; }
		
		//"“¿ “"
		public Keyword getCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterTeKeyword_0_1() { return cCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterTeKeyword_0_1; }
		
		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_0() { return cValueINTEGERTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPROCKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cImportsAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cImportsImportedVariableListParserRuleCall_3_0_0_0 = (RuleCall)cImportsAssignment_3_0_0.eContents().get(0);
		private final Assignment cVariablesAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cVariablesProcessVariableParserRuleCall_3_0_1_0 = (RuleCall)cVariablesAssignment_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Process:
		//    ("PROC" | "œ–Œ÷") name=ID "{"
		//    ((imports+=ImportedVariableList | variables+=ProcessVariable) ";")* // imports+=ImportedVariableList
		//    states+=State*
		//    "}";
		@Override public ParserRule getRule() { return rule; }
		
		//("PROC" | "œ–Œ÷") name=ID "{"
		//((imports+=ImportedVariableList | variables+=ProcessVariable) ";")* // imports+=ImportedVariableList
		//states+=State*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//("PROC" | "œ–Œ÷")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"PROC"
		public Keyword getPROCKeyword_0_0() { return cPROCKeyword_0_0; }
		
		//"œ–Œ÷"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//((imports+=ImportedVariableList | variables+=ProcessVariable) ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//(imports+=ImportedVariableList | variables+=ProcessVariable)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//imports+=ImportedVariableList
		public Assignment getImportsAssignment_3_0_0() { return cImportsAssignment_3_0_0; }
		
		//ImportedVariableList
		public RuleCall getImportsImportedVariableListParserRuleCall_3_0_0_0() { return cImportsImportedVariableListParserRuleCall_3_0_0_0; }
		
		//variables+=ProcessVariable
		public Assignment getVariablesAssignment_3_0_1() { return cVariablesAssignment_3_0_1; }
		
		//ProcessVariable
		public RuleCall getVariablesProcessVariableParserRuleCall_3_0_1_0() { return cVariablesProcessVariableParserRuleCall_3_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//// imports+=ImportedVariableList
		//   states+=State*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_0() { return cStatesStateParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSTATEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateFunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateFunctionStatementSequenceParserRuleCall_3_0 = (RuleCall)cStateFunctionAssignment_3.eContents().get(0);
		private final Assignment cTimeoutFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeoutFunctionTimeoutFunctionParserRuleCall_4_0 = (RuleCall)cTimeoutFunctionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//    ("STATE" | "—Œ—“") name=ID "{"
		//    stateFunction=StatementSequence
		//    (timeoutFunction=TimeoutFunction)?
		//    "}";
		@Override public ParserRule getRule() { return rule; }
		
		//("STATE" | "—Œ—“") name=ID "{"
		//stateFunction=StatementSequence
		//(timeoutFunction=TimeoutFunction)?
		//"}"
		public Group getGroup() { return cGroup; }
		
		//("STATE" | "—Œ—“")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"STATE"
		public Keyword getSTATEKeyword_0_0() { return cSTATEKeyword_0_0; }
		
		//"—Œ—“"
		public Keyword getCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_0_1() { return cCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//stateFunction=StatementSequence
		public Assignment getStateFunctionAssignment_3() { return cStateFunctionAssignment_3; }
		
		//StatementSequence
		public RuleCall getStateFunctionStatementSequenceParserRuleCall_3_0() { return cStateFunctionStatementSequenceParserRuleCall_3_0; }
		
		//(timeoutFunction=TimeoutFunction)?
		public Assignment getTimeoutFunctionAssignment_4() { return cTimeoutFunctionAssignment_4; }
		
		//TimeoutFunction
		public RuleCall getTimeoutFunctionTimeoutFunctionParserRuleCall_4_0() { return cTimeoutFunctionTimeoutFunctionParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ImportedVariableListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ImportedVariableList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cFROMKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cPROCKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterICyrillicCapitalLetterZeKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_1_0 = (CrossReference)cProcessAssignment_1.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_1_0_1 = (RuleCall)cProcessProcessCrossReference_1_0.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariablesProcessVariableCrossReference_2_0 = (CrossReference)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cVariablesProcessVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVariablesProcessVariableCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVariablesProcessVariableCrossReference_3_1_0 = (CrossReference)cVariablesAssignment_3_1.eContents().get(0);
		private final RuleCall cVariablesProcessVariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cVariablesProcessVariableCrossReference_3_1_0.eContents().get(1);
		
		//ImportedVariableList:
		//    (("FROM" "PROC") | ("»«" "œ–Œ÷")) process=[Process]
		//    variables+=[ProcessVariable] ("," variables+=[ProcessVariable])*;
		@Override public ParserRule getRule() { return rule; }
		
		//(("FROM" "PROC") | ("»«" "œ–Œ÷")) process=[Process]
		//variables+=[ProcessVariable] ("," variables+=[ProcessVariable])*
		public Group getGroup() { return cGroup; }
		
		//(("FROM" "PROC") | ("»«" "œ–Œ÷"))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//("FROM" "PROC")
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//"FROM"
		public Keyword getFROMKeyword_0_0_0() { return cFROMKeyword_0_0_0; }
		
		//"PROC"
		public Keyword getPROCKeyword_0_0_1() { return cPROCKeyword_0_0_1; }
		
		//("»«" "œ–Œ÷")
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"»«"
		public Keyword getCyrillicCapitalLetterICyrillicCapitalLetterZeKeyword_0_1_0() { return cCyrillicCapitalLetterICyrillicCapitalLetterZeKeyword_0_1_0; }
		
		//"œ–Œ÷"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1_1; }
		
		//process=[Process]
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_1_0() { return cProcessProcessCrossReference_1_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_1_0_1() { return cProcessProcessIDTerminalRuleCall_1_0_1; }
		
		//variables+=[ProcessVariable]
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//[ProcessVariable]
		public CrossReference getVariablesProcessVariableCrossReference_2_0() { return cVariablesProcessVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getVariablesProcessVariableIDTerminalRuleCall_2_0_1() { return cVariablesProcessVariableIDTerminalRuleCall_2_0_1; }
		
		//("," variables+=[ProcessVariable])*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//variables+=[ProcessVariable]
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }
		
		//[ProcessVariable]
		public CrossReference getVariablesProcessVariableCrossReference_3_1_0() { return cVariablesProcessVariableCrossReference_3_1_0; }
		
		//ID
		public RuleCall getVariablesProcessVariableIDTerminalRuleCall_3_1_0_1() { return cVariablesProcessVariableIDTerminalRuleCall_3_1_0_1; }
	}
	public class ProcessVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ProcessVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPhysicalVariableParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cProgramVariableParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLocalAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cLocalAlternatives_1_0_0 = (Alternatives)cLocalAssignment_1_0.eContents().get(0);
		private final Keyword cLocalLOCALKeyword_1_0_0_0 = (Keyword)cLocalAlternatives_1_0_0.eContents().get(0);
		private final Keyword cLocalCyrillicCapitalLetterElCyrillicCapitalLetterOCyrillicCapitalLetterKaCyrillicCapitalLetterACyrillicCapitalLetterElKeyword_1_0_0_1 = (Keyword)cLocalAlternatives_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSharedAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Alternatives cSharedAlternatives_1_1_0_0 = (Alternatives)cSharedAssignment_1_1_0.eContents().get(0);
		private final Keyword cSharedFORKeyword_1_1_0_0_0 = (Keyword)cSharedAlternatives_1_1_0_0.eContents().get(0);
		private final Keyword cSharedCyrillicCapitalLetterDeCyrillicCapitalLetterElCyrillicCapitalLetterYaKeyword_1_1_0_0_1 = (Keyword)cSharedAlternatives_1_1_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_1_0 = (Alternatives)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cALLKeyword_1_1_1_0_0 = (Keyword)cAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterVeCyrillicCapitalLetterEsCyrillicCapitalLetterIeCyrillicCapitalLetterHaKeyword_1_1_1_0_1 = (Keyword)cAlternatives_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1_1 = (Group)cAlternatives_1_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_1_1_0 = (Alternatives)cGroup_1_1_1_1.eContents().get(0);
		private final Keyword cPROCKeyword_1_1_1_1_0_0 = (Keyword)cAlternatives_1_1_1_1_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1_1_1_0_1 = (Keyword)cAlternatives_1_1_1_1_0.eContents().get(1);
		private final Assignment cProcessesAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final CrossReference cProcessesProcessCrossReference_1_1_1_1_1_0 = (CrossReference)cProcessesAssignment_1_1_1_1_1.eContents().get(0);
		private final RuleCall cProcessesProcessIDTerminalRuleCall_1_1_1_1_1_0_1 = (RuleCall)cProcessesProcessCrossReference_1_1_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1_1_2 = (Group)cGroup_1_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_1_2_0 = (Keyword)cGroup_1_1_1_1_2.eContents().get(0);
		private final Assignment cProcessesAssignment_1_1_1_1_2_1 = (Assignment)cGroup_1_1_1_1_2.eContents().get(1);
		private final CrossReference cProcessesProcessCrossReference_1_1_1_1_2_1_0 = (CrossReference)cProcessesAssignment_1_1_1_1_2_1.eContents().get(0);
		private final RuleCall cProcessesProcessIDTerminalRuleCall_1_1_1_1_2_1_0_1 = (RuleCall)cProcessesProcessCrossReference_1_1_1_1_2_1_0.eContents().get(1);
		
		// // ProcessVariable
		//ProcessVariable:
		//    (PhysicalVariable | ProgramVariable)
		//    (
		//        (local?=("LOCAL" | "ÀŒ ¿À")) |
		//        (shared?=("FOR" | "ƒÀﬂ")
		//            (
		//                ("ALL" | "¬—≈’") |
		//                ((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
		//            )
		//        )
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//(PhysicalVariable | ProgramVariable)
		//(
		//    (local?=("LOCAL" | "ÀŒ ¿À")) |
		//    (shared?=("FOR" | "ƒÀﬂ")
		//        (
		//            ("ALL" | "¬—≈’") |
		//            ((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
		//        )
		//    )
		//)
		public Group getGroup() { return cGroup; }
		
		//(PhysicalVariable | ProgramVariable)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PhysicalVariable
		public RuleCall getPhysicalVariableParserRuleCall_0_0() { return cPhysicalVariableParserRuleCall_0_0; }
		
		//ProgramVariable
		public RuleCall getProgramVariableParserRuleCall_0_1() { return cProgramVariableParserRuleCall_0_1; }
		
		//(
		//    (local?=("LOCAL" | "ÀŒ ¿À")) |
		//    (shared?=("FOR" | "ƒÀﬂ")
		//        (
		//            ("ALL" | "¬—≈’") |
		//            ((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
		//        )
		//    )
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(local?=("LOCAL" | "ÀŒ ¿À"))
		public Assignment getLocalAssignment_1_0() { return cLocalAssignment_1_0; }
		
		//("LOCAL" | "ÀŒ ¿À")
		public Alternatives getLocalAlternatives_1_0_0() { return cLocalAlternatives_1_0_0; }
		
		//"LOCAL"
		public Keyword getLocalLOCALKeyword_1_0_0_0() { return cLocalLOCALKeyword_1_0_0_0; }
		
		//"ÀŒ ¿À"
		public Keyword getLocalCyrillicCapitalLetterElCyrillicCapitalLetterOCyrillicCapitalLetterKaCyrillicCapitalLetterACyrillicCapitalLetterElKeyword_1_0_0_1() { return cLocalCyrillicCapitalLetterElCyrillicCapitalLetterOCyrillicCapitalLetterKaCyrillicCapitalLetterACyrillicCapitalLetterElKeyword_1_0_0_1; }
		
		//(shared?=("FOR" | "ƒÀﬂ")
		//    (
		//        ("ALL" | "¬—≈’") |
		//        ((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
		//    )
		//)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//shared?=("FOR" | "ƒÀﬂ")
		public Assignment getSharedAssignment_1_1_0() { return cSharedAssignment_1_1_0; }
		
		//("FOR" | "ƒÀﬂ")
		public Alternatives getSharedAlternatives_1_1_0_0() { return cSharedAlternatives_1_1_0_0; }
		
		//"FOR"
		public Keyword getSharedFORKeyword_1_1_0_0_0() { return cSharedFORKeyword_1_1_0_0_0; }
		
		//"ƒÀﬂ"
		public Keyword getSharedCyrillicCapitalLetterDeCyrillicCapitalLetterElCyrillicCapitalLetterYaKeyword_1_1_0_0_1() { return cSharedCyrillicCapitalLetterDeCyrillicCapitalLetterElCyrillicCapitalLetterYaKeyword_1_1_0_0_1; }
		
		//(
		//    ("ALL" | "¬—≈’") |
		//    ((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
		//)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//("ALL" | "¬—≈’")
		public Alternatives getAlternatives_1_1_1_0() { return cAlternatives_1_1_1_0; }
		
		//"ALL"
		public Keyword getALLKeyword_1_1_1_0_0() { return cALLKeyword_1_1_1_0_0; }
		
		//"¬—≈’"
		public Keyword getCyrillicCapitalLetterVeCyrillicCapitalLetterEsCyrillicCapitalLetterIeCyrillicCapitalLetterHaKeyword_1_1_1_0_1() { return cCyrillicCapitalLetterVeCyrillicCapitalLetterEsCyrillicCapitalLetterIeCyrillicCapitalLetterHaKeyword_1_1_1_0_1; }
		
		//((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//(("PROC") | ("œ–Œ÷"))
		public Alternatives getAlternatives_1_1_1_1_0() { return cAlternatives_1_1_1_1_0; }
		
		//("PROC")
		public Keyword getPROCKeyword_1_1_1_1_0_0() { return cPROCKeyword_1_1_1_1_0_0; }
		
		//("œ–Œ÷")
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1_1_1_0_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1_1_1_0_1; }
		
		//processes+=[Process]
		public Assignment getProcessesAssignment_1_1_1_1_1() { return cProcessesAssignment_1_1_1_1_1; }
		
		//[Process]
		public CrossReference getProcessesProcessCrossReference_1_1_1_1_1_0() { return cProcessesProcessCrossReference_1_1_1_1_1_0; }
		
		//ID
		public RuleCall getProcessesProcessIDTerminalRuleCall_1_1_1_1_1_0_1() { return cProcessesProcessIDTerminalRuleCall_1_1_1_1_1_0_1; }
		
		//("," processes+=[Process])*
		public Group getGroup_1_1_1_1_2() { return cGroup_1_1_1_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_1_1_1_2_0() { return cCommaKeyword_1_1_1_1_2_0; }
		
		//processes+=[Process]
		public Assignment getProcessesAssignment_1_1_1_1_2_1() { return cProcessesAssignment_1_1_1_1_2_1; }
		
		//[Process]
		public CrossReference getProcessesProcessCrossReference_1_1_1_1_2_1_0() { return cProcessesProcessCrossReference_1_1_1_1_2_1_0; }
		
		//ID
		public RuleCall getProcessesProcessIDTerminalRuleCall_1_1_1_1_2_1_0_1() { return cProcessesProcessIDTerminalRuleCall_1_1_1_1_2_1_0_1; }
	}
	public class PhysicalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.PhysicalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingPortMappingParserRuleCall_3_0 = (RuleCall)cMappingAssignment_3.eContents().get(0);
		
		///*
		//ProcessVariable:
		//    (PhysicalVariable | ProgramVariable) (accessibility=VariableAccessibility)?;
		//VariableAccessibility:
		//    local?=("LOCAL" | "ÀŒ ¿À") |
		//    (shared?=("FOR" | "ƒÀﬂ")
		//        (
		//            ("ALL" | "¬—≈’") |
		//            ((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
		//        )
		//    );
		//*/
		//PhysicalVariable:
		//    type=Type name=ID "=" mapping=PortMapping;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID "=" mapping=PortMapping
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_0_0() { return cTypeTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//mapping=PortMapping
		public Assignment getMappingAssignment_3() { return cMappingAssignment_3; }
		
		//PortMapping
		public RuleCall getMappingPortMappingParserRuleCall_3_0() { return cMappingPortMappingParserRuleCall_3_0; }
	}
	public class PortMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.PortMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPortPortCrossReference_1_0 = (CrossReference)cPortAssignment_1.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_1_0_1 = (RuleCall)cPortPortCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBitsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBitsINTEGERTerminalRuleCall_3_0 = (RuleCall)cBitsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PortMapping:
		//    "{" port=[Port] "[" (bits=INTEGER) "]" "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" port=[Port] "[" (bits=INTEGER) "]" "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//port=[Port]
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }
		
		//[Port]
		public CrossReference getPortPortCrossReference_1_0() { return cPortPortCrossReference_1_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_1_0_1() { return cPortPortIDTerminalRuleCall_1_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(bits=INTEGER)
		public Assignment getBitsAssignment_3() { return cBitsAssignment_3; }
		
		//INTEGER
		public RuleCall getBitsINTEGERTerminalRuleCall_3_0() { return cBitsINTEGERTerminalRuleCall_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePortTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAddr1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAddr1INTEGERTerminalRuleCall_2_0 = (RuleCall)cAddr1Assignment_2.eContents().get(0);
		private final Assignment cAddr2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddr2INTEGERTerminalRuleCall_3_0 = (RuleCall)cAddr2Assignment_3.eContents().get(0);
		private final Assignment cSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSizeINTEGERTerminalRuleCall_4_0 = (RuleCall)cSizeAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Port:
		//    type=PortType name=ID addr1=INTEGER addr2=INTEGER size=INTEGER ";";
		@Override public ParserRule getRule() { return rule; }
		
		//type=PortType name=ID addr1=INTEGER addr2=INTEGER size=INTEGER ";"
		public Group getGroup() { return cGroup; }
		
		//type=PortType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//PortType
		public RuleCall getTypePortTypeEnumRuleCall_0_0() { return cTypePortTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//addr1=INTEGER
		public Assignment getAddr1Assignment_2() { return cAddr1Assignment_2; }
		
		//INTEGER
		public RuleCall getAddr1INTEGERTerminalRuleCall_2_0() { return cAddr1INTEGERTerminalRuleCall_2_0; }
		
		//addr2=INTEGER
		public Assignment getAddr2Assignment_3() { return cAddr2Assignment_3; }
		
		//INTEGER
		public RuleCall getAddr2INTEGERTerminalRuleCall_3_0() { return cAddr2INTEGERTerminalRuleCall_3_0; }
		
		//size=INTEGER
		public Assignment getSizeAssignment_4() { return cSizeAssignment_4; }
		
		//INTEGER
		public RuleCall getSizeINTEGERTerminalRuleCall_4_0() { return cSizeINTEGERTerminalRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ProgramVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ProgramVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ProgramVariable:
		//    type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_0_0() { return cTypeTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TimeoutFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.TimeoutFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTIMEOUTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterShortICyrillicCapitalLetterEmCyrillicCapitalLetterACyrillicCapitalLetterUCyrillicCapitalLetterTeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTimeAmountOrRefParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cTimeAmountOrRefParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//TimeoutFunction:
		//    ("TIMEOUT" | "“¿…Ã¿”“") (TimeAmountOrRef | "(" TimeAmountOrRef ")") body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//("TIMEOUT" | "“¿…Ã¿”“") (TimeAmountOrRef | "(" TimeAmountOrRef ")") body=Statement
		public Group getGroup() { return cGroup; }
		
		//("TIMEOUT" | "“¿…Ã¿”“")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"TIMEOUT"
		public Keyword getTIMEOUTKeyword_0_0() { return cTIMEOUTKeyword_0_0; }
		
		//"“¿…Ã¿”“"
		public Keyword getCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterShortICyrillicCapitalLetterEmCyrillicCapitalLetterACyrillicCapitalLetterUCyrillicCapitalLetterTeKeyword_0_1() { return cCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterShortICyrillicCapitalLetterEmCyrillicCapitalLetterACyrillicCapitalLetterUCyrillicCapitalLetterTeKeyword_0_1; }
		
		//(TimeAmountOrRef | "(" TimeAmountOrRef ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TimeAmountOrRef
		public RuleCall getTimeAmountOrRefParserRuleCall_1_0() { return cTimeAmountOrRefParserRuleCall_1_0; }
		
		//"(" TimeAmountOrRef ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//TimeAmountOrRef
		public RuleCall getTimeAmountOrRefParserRuleCall_1_1_1() { return cTimeAmountOrRefParserRuleCall_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
		
		//body=Statement
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_2_0() { return cBodyStatementParserRuleCall_2_0; }
	}
	public class TimeAmountOrRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.TimeAmountOrRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTimeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTimeINTEGERTerminalRuleCall_0_0 = (RuleCall)cTimeAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRefIdReferenceCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefIdReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cRefIdReferenceCrossReference_1_0.eContents().get(1);
		
		//fragment TimeAmountOrRef:
		//    time=INTEGER | ref=[IdReference];
		@Override public ParserRule getRule() { return rule; }
		
		//time=INTEGER | ref=[IdReference]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//time=INTEGER
		public Assignment getTimeAssignment_0() { return cTimeAssignment_0; }
		
		//INTEGER
		public RuleCall getTimeINTEGERTerminalRuleCall_0_0() { return cTimeINTEGERTerminalRuleCall_0_0; }
		
		//ref=[IdReference]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[IdReference]
		public CrossReference getRefIdReferenceCrossReference_1_0() { return cRefIdReferenceCrossReference_1_0; }
		
		//ID
		public RuleCall getRefIdReferenceIDTerminalRuleCall_1_0_1() { return cRefIdReferenceIDTerminalRuleCall_1_0_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFUNCTIONKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEfCyrillicCapitalLetterUCyrillicCapitalLetterEnCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterICyrillicCapitalLetterYaKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeTypeEnumRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgTypesTypeEnumRuleCall_4_0 = (RuleCall)cArgTypesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgTypesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgTypesTypeEnumRuleCall_5_1_0 = (RuleCall)cArgTypesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Function:
		//    ("FUNCTION" | "‘”Õ ÷»ﬂ") returnType=Type name=ID "(" argTypes+=Type ("," argTypes+=Type)* ")" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//("FUNCTION" | "‘”Õ ÷»ﬂ") returnType=Type name=ID "(" argTypes+=Type ("," argTypes+=Type)* ")" ";"
		public Group getGroup() { return cGroup; }
		
		//("FUNCTION" | "‘”Õ ÷»ﬂ")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"FUNCTION"
		public Keyword getFUNCTIONKeyword_0_0() { return cFUNCTIONKeyword_0_0; }
		
		//"‘”Õ ÷»ﬂ"
		public Keyword getCyrillicCapitalLetterEfCyrillicCapitalLetterUCyrillicCapitalLetterEnCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterICyrillicCapitalLetterYaKeyword_0_1() { return cCyrillicCapitalLetterEfCyrillicCapitalLetterUCyrillicCapitalLetterEnCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterICyrillicCapitalLetterYaKeyword_0_1; }
		
		//returnType=Type
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//Type
		public RuleCall getReturnTypeTypeEnumRuleCall_1_0() { return cReturnTypeTypeEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//argTypes+=Type
		public Assignment getArgTypesAssignment_4() { return cArgTypesAssignment_4; }
		
		//Type
		public RuleCall getArgTypesTypeEnumRuleCall_4_0() { return cArgTypesTypeEnumRuleCall_4_0; }
		
		//("," argTypes+=Type)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//argTypes+=Type
		public Assignment getArgTypesAssignment_5_1() { return cArgTypesAssignment_5_1; }
		
		//Type
		public RuleCall getArgTypesTypeEnumRuleCall_5_1_0() { return cArgTypesTypeEnumRuleCall_5_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCONSTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterEnCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Const:
		//    ("CONST" | " ŒÕ—“") name=ID value=Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//("CONST" | " ŒÕ—“") name=ID value=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//("CONST" | " ŒÕ—“")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"CONST"
		public Keyword getCONSTKeyword_0_0() { return cCONSTKeyword_0_0; }
		
		//" ŒÕ—“"
		public Keyword getCyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterEnCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_0_1() { return cCyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterEnCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cENUMKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterIeCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterCheCyrillicCapitalLetterICyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIeCyrillicCapitalLetterEnCyrillicCapitalLetterICyrillicCapitalLetterIeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnumMembersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnumMembersEnumMemberParserRuleCall_2_0 = (RuleCall)cEnumMembersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEnumMembersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEnumMembersEnumMemberParserRuleCall_3_1_0 = (RuleCall)cEnumMembersAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enum:
		//    ("ENUM" | "œ≈–≈◊»—À≈Õ»≈") "{" enumMembers+=EnumMember ("," enumMembers+=EnumMember)* "}" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//("ENUM" | "œ≈–≈◊»—À≈Õ»≈") "{" enumMembers+=EnumMember ("," enumMembers+=EnumMember)* "}" ";"
		public Group getGroup() { return cGroup; }
		
		//("ENUM" | "œ≈–≈◊»—À≈Õ»≈")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"ENUM"
		public Keyword getENUMKeyword_0_0() { return cENUMKeyword_0_0; }
		
		//"œ≈–≈◊»—À≈Õ»≈"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterIeCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterCheCyrillicCapitalLetterICyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIeCyrillicCapitalLetterEnCyrillicCapitalLetterICyrillicCapitalLetterIeKeyword_0_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterIeCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterCheCyrillicCapitalLetterICyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIeCyrillicCapitalLetterEnCyrillicCapitalLetterICyrillicCapitalLetterIeKeyword_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//enumMembers+=EnumMember
		public Assignment getEnumMembersAssignment_2() { return cEnumMembersAssignment_2; }
		
		//EnumMember
		public RuleCall getEnumMembersEnumMemberParserRuleCall_2_0() { return cEnumMembersEnumMemberParserRuleCall_2_0; }
		
		//("," enumMembers+=EnumMember)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//enumMembers+=EnumMember
		public Assignment getEnumMembersAssignment_3_1() { return cEnumMembersAssignment_3_1; }
		
		//EnumMember
		public RuleCall getEnumMembersEnumMemberParserRuleCall_3_1_0() { return cEnumMembersEnumMemberParserRuleCall_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class EnumMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.EnumMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//EnumMember:
		//    name=ID ("=" value=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ("=" value=Expression)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("=" value=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_1_0() { return cValueExpressionParserRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cCompoundStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStartProcStatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopProcStatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cErrorStatParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRestartStatParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cResetStatParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLoopStatParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSetStateStatParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIfElseStatParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSwitchStatParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cExpressionParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		
		//        // Statements
		//Statement:
		//    {Statement} ";" | CompoundStatement | StartProcStat | StopProcStat |
		//    ErrorStat | RestartStat | ResetStat | LoopStat | SetStateStat |
		//    IfElseStat | SwitchStat | Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{Statement} ";" | CompoundStatement | StartProcStat | StopProcStat |
		//ErrorStat | RestartStat | ResetStat | LoopStat | SetStateStat |
		//IfElseStat | SwitchStat | Expression ";"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Statement} ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Statement}
		public Action getStatementAction_0_0() { return cStatementAction_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_1() { return cCompoundStatementParserRuleCall_1; }
		
		//StartProcStat
		public RuleCall getStartProcStatParserRuleCall_2() { return cStartProcStatParserRuleCall_2; }
		
		//StopProcStat
		public RuleCall getStopProcStatParserRuleCall_3() { return cStopProcStatParserRuleCall_3; }
		
		//ErrorStat
		public RuleCall getErrorStatParserRuleCall_4() { return cErrorStatParserRuleCall_4; }
		
		//RestartStat
		public RuleCall getRestartStatParserRuleCall_5() { return cRestartStatParserRuleCall_5; }
		
		//ResetStat
		public RuleCall getResetStatParserRuleCall_6() { return cResetStatParserRuleCall_6; }
		
		//LoopStat
		public RuleCall getLoopStatParserRuleCall_7() { return cLoopStatParserRuleCall_7; }
		
		//SetStateStat
		public RuleCall getSetStateStatParserRuleCall_8() { return cSetStateStatParserRuleCall_8; }
		
		//IfElseStat
		public RuleCall getIfElseStatParserRuleCall_9() { return cIfElseStatParserRuleCall_9; }
		
		//SwitchStat
		public RuleCall getSwitchStatParserRuleCall_10() { return cSwitchStatParserRuleCall_10; }
		
		//Expression ";"
		public Group getGroup_11() { return cGroup_11; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_11_0() { return cExpressionParserRuleCall_11_0; }
		
		//";"
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }
	}
	public class StatementSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.StatementSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//StatementSequence:
		//    {StatementSequence} statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementSequence} statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{StatementSequence}
		public Action getStatementSequenceAction_0() { return cStatementSequenceAction_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.CompoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CompoundStatement:
		//    {CompoundStatement} "{" statements+=Statement* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{CompoundStatement} "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }
		
		//{CompoundStatement}
		public Action getCompoundStatementAction_0() { return cCompoundStatementAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class IfElseStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.IfElseStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIFKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_0_0 = (Alternatives)cGroup_5_0.eContents().get(0);
		private final Keyword cELSEKeyword_5_0_0_0 = (Keyword)cAlternatives_5_0_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterICyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterCheCyrillicCapitalLetterIeKeyword_5_0_0_1 = (Keyword)cAlternatives_5_0_0.eContents().get(1);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//IfElseStat:
		//    ("IF" | "≈—À»") "(" cond=Expression ")"
		//    then=Statement
		//    (=> ("ELSE" | "»Õ¿◊≈") else=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//("IF" | "≈—À»") "(" cond=Expression ")"
		//then=Statement
		//(=> ("ELSE" | "»Õ¿◊≈") else=Statement)?
		public Group getGroup() { return cGroup; }
		
		//("IF" | "≈—À»")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"IF"
		public Keyword getIFKeyword_0_0() { return cIFKeyword_0_0; }
		
		//"≈—À»"
		public Keyword getCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIKeyword_0_1() { return cCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIKeyword_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then=Statement
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//Statement
		public RuleCall getThenStatementParserRuleCall_4_0() { return cThenStatementParserRuleCall_4_0; }
		
		//(=> ("ELSE" | "»Õ¿◊≈") else=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> ("ELSE" | "»Õ¿◊≈")
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//"ELSE" | "»Õ¿◊≈"
		public Alternatives getAlternatives_5_0_0() { return cAlternatives_5_0_0; }
		
		//"ELSE"
		public Keyword getELSEKeyword_5_0_0_0() { return cELSEKeyword_5_0_0_0; }
		
		//"»Õ¿◊≈"
		public Keyword getCyrillicCapitalLetterICyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterCheCyrillicCapitalLetterIeKeyword_5_0_0_1() { return cCyrillicCapitalLetterICyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterCheCyrillicCapitalLetterIeKeyword_5_0_0_1; }
		
		//else=Statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//Statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
	}
	public class SwitchStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.SwitchStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSWITCHKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterErCyrillicCapitalLetterACyrillicCapitalLetterZeCyrillicCapitalLetterBeCyrillicCapitalLetterOCyrillicCapitalLetterErKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOptionsCaseStatParserRuleCall_5_0 = (RuleCall)cOptionsAssignment_5.eContents().get(0);
		private final Assignment cDefaultOptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultOptionDefaultStatParserRuleCall_6_0 = (RuleCall)cDefaultOptionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SwitchStat:
		//    ("SWITCH" | "–¿«¡Œ–") "(" expr=Expression ")" "{"
		//    options+=CaseStat*
		//    defaultOption=DefaultStat?
		//    "}";
		@Override public ParserRule getRule() { return rule; }
		
		//("SWITCH" | "–¿«¡Œ–") "(" expr=Expression ")" "{"
		//options+=CaseStat*
		//defaultOption=DefaultStat?
		//"}"
		public Group getGroup() { return cGroup; }
		
		//("SWITCH" | "–¿«¡Œ–")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"SWITCH"
		public Keyword getSWITCHKeyword_0_0() { return cSWITCHKeyword_0_0; }
		
		//"–¿«¡Œ–"
		public Keyword getCyrillicCapitalLetterErCyrillicCapitalLetterACyrillicCapitalLetterZeCyrillicCapitalLetterBeCyrillicCapitalLetterOCyrillicCapitalLetterErKeyword_0_1() { return cCyrillicCapitalLetterErCyrillicCapitalLetterACyrillicCapitalLetterZeCyrillicCapitalLetterBeCyrillicCapitalLetterOCyrillicCapitalLetterErKeyword_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//options+=CaseStat*
		public Assignment getOptionsAssignment_5() { return cOptionsAssignment_5; }
		
		//CaseStat
		public RuleCall getOptionsCaseStatParserRuleCall_5_0() { return cOptionsCaseStatParserRuleCall_5_0; }
		
		//defaultOption=DefaultStat?
		public Assignment getDefaultOptionAssignment_6() { return cDefaultOptionAssignment_6; }
		
		//DefaultStat
		public RuleCall getDefaultOptionDefaultStatParserRuleCall_6_0() { return cDefaultOptionDefaultStatParserRuleCall_6_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CaseStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.CaseStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCASEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterUCyrillicCapitalLetterCheCyrillicCapitalLetterACyrillicCapitalLetterShortIKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionExpressionParserRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSwitchOptionStatSequenceParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CaseStat:
		//    ("CASE" | "—À”◊¿…") option=Expression ":" "{" SwitchOptionStatSequence "}";
		@Override public ParserRule getRule() { return rule; }
		
		//("CASE" | "—À”◊¿…") option=Expression ":" "{" SwitchOptionStatSequence "}"
		public Group getGroup() { return cGroup; }
		
		//("CASE" | "—À”◊¿…")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"CASE"
		public Keyword getCASEKeyword_0_0() { return cCASEKeyword_0_0; }
		
		//"—À”◊¿…"
		public Keyword getCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterUCyrillicCapitalLetterCheCyrillicCapitalLetterACyrillicCapitalLetterShortIKeyword_0_1() { return cCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterUCyrillicCapitalLetterCheCyrillicCapitalLetterACyrillicCapitalLetterShortIKeyword_0_1; }
		
		//option=Expression
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//Expression
		public RuleCall getOptionExpressionParserRuleCall_1_0() { return cOptionExpressionParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//SwitchOptionStatSequence
		public RuleCall getSwitchOptionStatSequenceParserRuleCall_4() { return cSwitchOptionStatSequenceParserRuleCall_4; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DefaultStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.DefaultStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDEFAULTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterUCyrillicCapitalLetterEmCyrillicCapitalLetterOCyrillicCapitalLetterElCyrillicCapitalLetterCheCyrillicCapitalLetterACyrillicCapitalLetterEnCyrillicCapitalLetterICyrillicCapitalLetterIeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSwitchOptionStatSequenceParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DefaultStat:
		//    ("DEFAULT" | "”ÃŒÀ◊¿Õ»≈") ":" "{" SwitchOptionStatSequence "}";
		@Override public ParserRule getRule() { return rule; }
		
		//("DEFAULT" | "”ÃŒÀ◊¿Õ»≈") ":" "{" SwitchOptionStatSequence "}"
		public Group getGroup() { return cGroup; }
		
		//("DEFAULT" | "”ÃŒÀ◊¿Õ»≈")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"DEFAULT"
		public Keyword getDEFAULTKeyword_0_0() { return cDEFAULTKeyword_0_0; }
		
		//"”ÃŒÀ◊¿Õ»≈"
		public Keyword getCyrillicCapitalLetterUCyrillicCapitalLetterEmCyrillicCapitalLetterOCyrillicCapitalLetterElCyrillicCapitalLetterCheCyrillicCapitalLetterACyrillicCapitalLetterEnCyrillicCapitalLetterICyrillicCapitalLetterIeKeyword_0_1() { return cCyrillicCapitalLetterUCyrillicCapitalLetterEmCyrillicCapitalLetterOCyrillicCapitalLetterElCyrillicCapitalLetterCheCyrillicCapitalLetterACyrillicCapitalLetterEnCyrillicCapitalLetterICyrillicCapitalLetterIeKeyword_0_1; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SwitchOptionStatSequence
		public RuleCall getSwitchOptionStatSequenceParserRuleCall_3() { return cSwitchOptionStatSequenceParserRuleCall_3; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SwitchOptionStatSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.SwitchOptionStatSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Assignment cHasBreakAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHasBreakBreakStatParserRuleCall_1_0 = (RuleCall)cHasBreakAssignment_1.eContents().get(0);
		
		//fragment SwitchOptionStatSequence:
		//    statements+=Statement* hasBreak?=BreakStat?;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement* hasBreak?=BreakStat?
		public Group getGroup() { return cGroup; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }
		
		//hasBreak?=BreakStat?
		public Assignment getHasBreakAssignment_1() { return cHasBreakAssignment_1; }
		
		//BreakStat
		public RuleCall getHasBreakBreakStatParserRuleCall_1_0() { return cHasBreakBreakStatParserRuleCall_1_0; }
	}
	public class BreakStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BreakStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBREAKKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterEnCyrillicCapitalLetterIeCyrillicCapitalLetterTseKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BreakStat:
		//    ("BREAK" | " ŒÕ≈÷") ";";
		@Override public ParserRule getRule() { return rule; }
		
		//("BREAK" | " ŒÕ≈÷") ";"
		public Group getGroup() { return cGroup; }
		
		//("BREAK" | " ŒÕ≈÷")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"BREAK"
		public Keyword getBREAKKeyword_0_0() { return cBREAKKeyword_0_0; }
		
		//" ŒÕ≈÷"
		public Keyword getCyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterEnCyrillicCapitalLetterIeCyrillicCapitalLetterTseKeyword_0_1() { return cCyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterEnCyrillicCapitalLetterIeCyrillicCapitalLetterTseKeyword_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class StartProcStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.StartProcStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSTARTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPROCKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cProcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcessProcessCrossReference_2_0 = (CrossReference)cProcessAssignment_2.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_2_0_1 = (RuleCall)cProcessProcessCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StartProcStat:
		//    ("START" | "—“¿–“") ("PROC" | "œ–Œ÷")? process=[Process] ";";
		@Override public ParserRule getRule() { return rule; }
		
		//("START" | "—“¿–“") ("PROC" | "œ–Œ÷")? process=[Process] ";"
		public Group getGroup() { return cGroup; }
		
		//("START" | "—“¿–“")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"START"
		public Keyword getSTARTKeyword_0_0() { return cSTARTKeyword_0_0; }
		
		//"—“¿–“"
		public Keyword getCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_0_1() { return cCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_0_1; }
		
		//("PROC" | "œ–Œ÷")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"PROC"
		public Keyword getPROCKeyword_1_0() { return cPROCKeyword_1_0; }
		
		//"œ–Œ÷"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1; }
		
		//process=[Process]
		public Assignment getProcessAssignment_2() { return cProcessAssignment_2; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_2_0() { return cProcessProcessCrossReference_2_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_2_0_1() { return cProcessProcessIDTerminalRuleCall_2_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class StopProcStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.StopProcStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopProcStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSTOPKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOCyrillicCapitalLetterPeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cPROCKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cProcessAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_2_1_0 = (CrossReference)cProcessAssignment_2_1.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_2_1_0_1 = (RuleCall)cProcessProcessCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StopProcStat:
		//    {StopProcStat} ("STOP" | "—“Œœ") (("PROC" | "œ–Œ÷")? (process=[Process]))? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{StopProcStat} ("STOP" | "—“Œœ") (("PROC" | "œ–Œ÷")? (process=[Process]))? ";"
		public Group getGroup() { return cGroup; }
		
		//{StopProcStat}
		public Action getStopProcStatAction_0() { return cStopProcStatAction_0; }
		
		//("STOP" | "—“Œœ")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"STOP"
		public Keyword getSTOPKeyword_1_0() { return cSTOPKeyword_1_0; }
		
		//"—“Œœ"
		public Keyword getCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOCyrillicCapitalLetterPeKeyword_1_1() { return cCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOCyrillicCapitalLetterPeKeyword_1_1; }
		
		//(("PROC" | "œ–Œ÷")? (process=[Process]))?
		public Group getGroup_2() { return cGroup_2; }
		
		//("PROC" | "œ–Œ÷")?
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//"PROC"
		public Keyword getPROCKeyword_2_0_0() { return cPROCKeyword_2_0_0; }
		
		//"œ–Œ÷"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_2_0_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_2_0_1; }
		
		//(process=[Process])
		public Assignment getProcessAssignment_2_1() { return cProcessAssignment_2_1; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_2_1_0() { return cProcessProcessCrossReference_2_1_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_2_1_0_1() { return cProcessProcessIDTerminalRuleCall_2_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ErrorStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ErrorStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cErrorStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cERRORKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterOCyrillicCapitalLetterShaCyrillicCapitalLetterICyrillicCapitalLetterBeCyrillicCapitalLetterKaCyrillicCapitalLetterAKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cPROCKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cProcessAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_2_1_0 = (CrossReference)cProcessAssignment_2_1.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_2_1_0_1 = (RuleCall)cProcessProcessCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ErrorStat:
		//    {ErrorStat} ("ERROR" | "Œÿ»¡ ¿") (("PROC" | "œ–Œ÷")? (process=[Process]))? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{ErrorStat} ("ERROR" | "Œÿ»¡ ¿") (("PROC" | "œ–Œ÷")? (process=[Process]))? ";"
		public Group getGroup() { return cGroup; }
		
		//{ErrorStat}
		public Action getErrorStatAction_0() { return cErrorStatAction_0; }
		
		//("ERROR" | "Œÿ»¡ ¿")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"ERROR"
		public Keyword getERRORKeyword_1_0() { return cERRORKeyword_1_0; }
		
		//"Œÿ»¡ ¿"
		public Keyword getCyrillicCapitalLetterOCyrillicCapitalLetterShaCyrillicCapitalLetterICyrillicCapitalLetterBeCyrillicCapitalLetterKaCyrillicCapitalLetterAKeyword_1_1() { return cCyrillicCapitalLetterOCyrillicCapitalLetterShaCyrillicCapitalLetterICyrillicCapitalLetterBeCyrillicCapitalLetterKaCyrillicCapitalLetterAKeyword_1_1; }
		
		//(("PROC" | "œ–Œ÷")? (process=[Process]))?
		public Group getGroup_2() { return cGroup_2; }
		
		//("PROC" | "œ–Œ÷")?
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//"PROC"
		public Keyword getPROCKeyword_2_0_0() { return cPROCKeyword_2_0_0; }
		
		//"œ–Œ÷"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_2_0_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_2_0_1; }
		
		//(process=[Process])
		public Assignment getProcessAssignment_2_1() { return cProcessAssignment_2_1; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_2_1_0() { return cProcessProcessCrossReference_2_1_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_2_1_0_1() { return cProcessProcessIDTerminalRuleCall_2_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RestartStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.RestartStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestartStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRESTARTKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cPROCKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RestartStat:
		//    {RestartStat} (("RESTART" "PROC") | ("–≈—“¿–“" "œ–Œ÷")) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{RestartStat} (("RESTART" "PROC") | ("–≈—“¿–“" "œ–Œ÷")) ";"
		public Group getGroup() { return cGroup; }
		
		//{RestartStat}
		public Action getRestartStatAction_0() { return cRestartStatAction_0; }
		
		//(("RESTART" "PROC") | ("–≈—“¿–“" "œ–Œ÷"))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//("RESTART" "PROC")
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"RESTART"
		public Keyword getRESTARTKeyword_1_0_0() { return cRESTARTKeyword_1_0_0; }
		
		//"PROC"
		public Keyword getPROCKeyword_1_0_1() { return cPROCKeyword_1_0_1; }
		
		//("–≈—“¿–“" "œ–Œ÷")
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"–≈—“¿–“"
		public Keyword getCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_1_1_0() { return cCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_1_1_0; }
		
		//"œ–Œ÷"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_1_1_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ResetStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ResetStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResetStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRESTARTKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cTIMERKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterShortICyrillicCapitalLetterEmCyrillicCapitalLetterIeCyrillicCapitalLetterErKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ResetStat:
		//    {ResetStat} (("RESTART" "TIMER") | ("–≈—“¿–“" "“¿…Ã≈–")) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{ResetStat} (("RESTART" "TIMER") | ("–≈—“¿–“" "“¿…Ã≈–")) ";"
		public Group getGroup() { return cGroup; }
		
		//{ResetStat}
		public Action getResetStatAction_0() { return cResetStatAction_0; }
		
		//(("RESTART" "TIMER") | ("–≈—“¿–“" "“¿…Ã≈–"))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//("RESTART" "TIMER")
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"RESTART"
		public Keyword getRESTARTKeyword_1_0_0() { return cRESTARTKeyword_1_0_0; }
		
		//"TIMER"
		public Keyword getTIMERKeyword_1_0_1() { return cTIMERKeyword_1_0_1; }
		
		//("–≈—“¿–“" "“¿…Ã≈–")
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"–≈—“¿–“"
		public Keyword getCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_1_1_0() { return cCyrillicCapitalLetterErCyrillicCapitalLetterIeCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterErCyrillicCapitalLetterTeKeyword_1_1_0; }
		
		//"“¿…Ã≈–"
		public Keyword getCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterShortICyrillicCapitalLetterEmCyrillicCapitalLetterIeCyrillicCapitalLetterErKeyword_1_1_1() { return cCyrillicCapitalLetterTeCyrillicCapitalLetterACyrillicCapitalLetterShortICyrillicCapitalLetterEmCyrillicCapitalLetterIeCyrillicCapitalLetterErKeyword_1_1_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LoopStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.LoopStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLOOPKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterZeCyrillicCapitalLetterACyrillicCapitalLetterTseCyrillicCapitalLetterICyrillicCapitalLetterKaCyrillicCapitalLetterElCyrillicCapitalLetterICyrillicCapitalLetterTeCyrillicCapitalLetterSoftSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LoopStat:
		//    {LoopStat} ("LOOP" | "«¿÷» À»“‹") ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{LoopStat} ("LOOP" | "«¿÷» À»“‹") ";"
		public Group getGroup() { return cGroup; }
		
		//{LoopStat}
		public Action getLoopStatAction_0() { return cLoopStatAction_0; }
		
		//("LOOP" | "«¿÷» À»“‹")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"LOOP"
		public Keyword getLOOPKeyword_1_0() { return cLOOPKeyword_1_0; }
		
		//"«¿÷» À»“‹"
		public Keyword getCyrillicCapitalLetterZeCyrillicCapitalLetterACyrillicCapitalLetterTseCyrillicCapitalLetterICyrillicCapitalLetterKaCyrillicCapitalLetterElCyrillicCapitalLetterICyrillicCapitalLetterTeCyrillicCapitalLetterSoftSignKeyword_1_1() { return cCyrillicCapitalLetterZeCyrillicCapitalLetterACyrillicCapitalLetterTseCyrillicCapitalLetterICyrillicCapitalLetterKaCyrillicCapitalLetterElCyrillicCapitalLetterICyrillicCapitalLetterTeCyrillicCapitalLetterSoftSignKeyword_1_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SetStateStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.SetStateStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetStateStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSETKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterVeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNextAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Alternatives cNextAlternatives_2_0_0 = (Alternatives)cNextAssignment_2_0.eContents().get(0);
		private final Keyword cNextNEXTKeyword_2_0_0_0 = (Keyword)cNextAlternatives_2_0_0.eContents().get(0);
		private final Keyword cNextCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIeCyrillicCapitalLetterDeCyrillicCapitalLetterUCyrillicCapitalLetterYuCyrillicCapitalLetterShchaCyrillicCapitalLetterIeCyrillicCapitalLetterIeKeyword_2_0_0_1 = (Keyword)cNextAlternatives_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cGroup_2_1.eContents().get(0);
		private final Keyword cSTATEKeyword_2_1_0_0 = (Keyword)cAlternatives_2_1_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_2_1_0_1 = (Keyword)cAlternatives_2_1_0.eContents().get(1);
		private final Assignment cStateAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cStateStateCrossReference_2_1_1_0 = (CrossReference)cStateAssignment_2_1_1.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cStateStateCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetStateStat:
		//    {SetStateStat} ("SET" | "¬")
		//    ((next?=("NEXT" | "—À≈ƒ”ﬁŸ≈≈")) | (("STATE" | "—Œ—“") state=[State])) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{SetStateStat} ("SET" | "¬")
		//((next?=("NEXT" | "—À≈ƒ”ﬁŸ≈≈")) | (("STATE" | "—Œ—“") state=[State])) ";"
		public Group getGroup() { return cGroup; }
		
		//{SetStateStat}
		public Action getSetStateStatAction_0() { return cSetStateStatAction_0; }
		
		//("SET" | "¬")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"SET"
		public Keyword getSETKeyword_1_0() { return cSETKeyword_1_0; }
		
		//"¬"
		public Keyword getCyrillicCapitalLetterVeKeyword_1_1() { return cCyrillicCapitalLetterVeKeyword_1_1; }
		
		//((next?=("NEXT" | "—À≈ƒ”ﬁŸ≈≈")) | (("STATE" | "—Œ—“") state=[State]))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(next?=("NEXT" | "—À≈ƒ”ﬁŸ≈≈"))
		public Assignment getNextAssignment_2_0() { return cNextAssignment_2_0; }
		
		//("NEXT" | "—À≈ƒ”ﬁŸ≈≈")
		public Alternatives getNextAlternatives_2_0_0() { return cNextAlternatives_2_0_0; }
		
		//"NEXT"
		public Keyword getNextNEXTKeyword_2_0_0_0() { return cNextNEXTKeyword_2_0_0_0; }
		
		//"—À≈ƒ”ﬁŸ≈≈"
		public Keyword getNextCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIeCyrillicCapitalLetterDeCyrillicCapitalLetterUCyrillicCapitalLetterYuCyrillicCapitalLetterShchaCyrillicCapitalLetterIeCyrillicCapitalLetterIeKeyword_2_0_0_1() { return cNextCyrillicCapitalLetterEsCyrillicCapitalLetterElCyrillicCapitalLetterIeCyrillicCapitalLetterDeCyrillicCapitalLetterUCyrillicCapitalLetterYuCyrillicCapitalLetterShchaCyrillicCapitalLetterIeCyrillicCapitalLetterIeKeyword_2_0_0_1; }
		
		//(("STATE" | "—Œ—“") state=[State])
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//("STATE" | "—Œ—“")
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }
		
		//"STATE"
		public Keyword getSTATEKeyword_2_1_0_0() { return cSTATEKeyword_2_1_0_0; }
		
		//"—Œ—“"
		public Keyword getCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_2_1_0_1() { return cCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_2_1_0_1; }
		
		//state=[State]
		public Assignment getStateAssignment_2_1_1() { return cStateAssignment_2_1_1; }
		
		//[State]
		public CrossReference getStateStateCrossReference_2_1_1_0() { return cStateStateCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_1_1_0_1() { return cStateStateIDTerminalRuleCall_2_1_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class IdReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.IdReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPhysicalVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProgramVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumMemberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IdReference:
		//    PhysicalVariable | ProgramVariable | EnumMember | Const;
		@Override public ParserRule getRule() { return rule; }
		
		//PhysicalVariable | ProgramVariable | EnumMember | Const
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PhysicalVariable
		public RuleCall getPhysicalVariableParserRuleCall_0() { return cPhysicalVariableParserRuleCall_0; }
		
		//ProgramVariable
		public RuleCall getProgramVariableParserRuleCall_1() { return cProgramVariableParserRuleCall_1; }
		
		//EnumMember
		public RuleCall getEnumMemberParserRuleCall_2() { return cEnumMemberParserRuleCall_2; }
		
		//Const
		public RuleCall getConstParserRuleCall_3() { return cConstParserRuleCall_3; }
	}
	public class InfixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.InfixOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpInfixPostfixOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefIdReferenceCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefIdReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cRefIdReferenceCrossReference_1_0.eContents().get(1);
		
		//        // Expressions
		//InfixOp:
		//    op=InfixPostfixOp ref=[IdReference];
		@Override public ParserRule getRule() { return rule; }
		
		//op=InfixPostfixOp ref=[IdReference]
		public Group getGroup() { return cGroup; }
		
		//op=InfixPostfixOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//InfixPostfixOp
		public RuleCall getOpInfixPostfixOpEnumRuleCall_0_0() { return cOpInfixPostfixOpEnumRuleCall_0_0; }
		
		//ref=[IdReference]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[IdReference]
		public CrossReference getRefIdReferenceCrossReference_1_0() { return cRefIdReferenceCrossReference_1_0; }
		
		//ID
		public RuleCall getRefIdReferenceIDTerminalRuleCall_1_0_1() { return cRefIdReferenceIDTerminalRuleCall_1_0_1; }
	}
	public class PostfixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.PostfixOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefIdReferenceCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefIdReferenceIDTerminalRuleCall_0_0_1 = (RuleCall)cRefIdReferenceCrossReference_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpInfixPostfixOpEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//PostfixOp:
		//    ref=[IdReference] op=InfixPostfixOp;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[IdReference] op=InfixPostfixOp
		public Group getGroup() { return cGroup; }
		
		//ref=[IdReference]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[IdReference]
		public CrossReference getRefIdReferenceCrossReference_0_0() { return cRefIdReferenceCrossReference_0_0; }
		
		//ID
		public RuleCall getRefIdReferenceIDTerminalRuleCall_0_0_1() { return cRefIdReferenceIDTerminalRuleCall_0_0_1; }
		
		//op=InfixPostfixOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//InfixPostfixOp
		public RuleCall getOpInfixPostfixOpEnumRuleCall_1_0() { return cOpInfixPostfixOpEnumRuleCall_1_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//    function=[Function] "(" (args+=Expression ("," args+=Expression)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//function=[Function] "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//function=[Function]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[Function]
		public CrossReference getFunctionFunctionCrossReference_0_0() { return cFunctionFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }
		
		//("," args+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CheckStateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.CheckStateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPROCKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_1_0 = (CrossReference)cProcessAssignment_1.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_1_0_1 = (RuleCall)cProcessProcessCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cINKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cSTATEKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterVeKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cQualfierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQualfierStateQualifierEnumRuleCall_3_0 = (RuleCall)cQualfierAssignment_3.eContents().get(0);
		
		//CheckStateExpression:
		//    ("PROC" | "œ–Œ÷") process=[Process] (("IN" "STATE") | ("¬" "—Œ—“")) qualfier=StateQualifier;
		@Override public ParserRule getRule() { return rule; }
		
		//("PROC" | "œ–Œ÷") process=[Process] (("IN" "STATE") | ("¬" "—Œ—“")) qualfier=StateQualifier
		public Group getGroup() { return cGroup; }
		
		//("PROC" | "œ–Œ÷")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"PROC"
		public Keyword getPROCKeyword_0_0() { return cPROCKeyword_0_0; }
		
		//"œ–Œ÷"
		public Keyword getCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1() { return cCyrillicCapitalLetterPeCyrillicCapitalLetterErCyrillicCapitalLetterOCyrillicCapitalLetterTseKeyword_0_1; }
		
		//process=[Process]
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_1_0() { return cProcessProcessCrossReference_1_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_1_0_1() { return cProcessProcessIDTerminalRuleCall_1_0_1; }
		
		//(("IN" "STATE") | ("¬" "—Œ—“"))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//("IN" "STATE")
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"IN"
		public Keyword getINKeyword_2_0_0() { return cINKeyword_2_0_0; }
		
		//"STATE"
		public Keyword getSTATEKeyword_2_0_1() { return cSTATEKeyword_2_0_1; }
		
		//("¬" "—Œ—“")
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"¬"
		public Keyword getCyrillicCapitalLetterVeKeyword_2_1_0() { return cCyrillicCapitalLetterVeKeyword_2_1_0; }
		
		//"—Œ—“"
		public Keyword getCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_2_1_1() { return cCyrillicCapitalLetterEsCyrillicCapitalLetterOCyrillicCapitalLetterEsCyrillicCapitalLetterTeKeyword_2_1_1; }
		
		//qualfier=StateQualifier
		public Assignment getQualfierAssignment_3() { return cQualfierAssignment_3; }
		
		//StateQualifier
		public RuleCall getQualfierStateQualifierEnumRuleCall_3_0() { return cQualfierStateQualifierEnumRuleCall_3_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cReferenceIdReferenceCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceIdReferenceIDTerminalRuleCall_0_0_1 = (RuleCall)cReferenceIdReferenceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIntegerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIntegerINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cIntegerAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPrimaryExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cFloatingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFloatingFLOATTerminalRuleCall_2_1_0 = (RuleCall)cFloatingAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrimaryExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cBoolAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBoolBOOL_LITERALTerminalRuleCall_3_1_0 = (RuleCall)cBoolAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNestedExprAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNestedExprExpressionParserRuleCall_4_1_0 = (RuleCall)cNestedExprAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//PrimaryExpression:
		//    reference=[IdReference] |
		//    {PrimaryExpression} integer=INTEGER |
		//    {PrimaryExpression} floating=FLOAT |
		//    {PrimaryExpression} bool=BOOL_LITERAL |
		//    "(" nestedExpr=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[IdReference] |
		//{PrimaryExpression} integer=INTEGER |
		//{PrimaryExpression} floating=FLOAT |
		//{PrimaryExpression} bool=BOOL_LITERAL |
		//"(" nestedExpr=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//reference=[IdReference]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }
		
		//[IdReference]
		public CrossReference getReferenceIdReferenceCrossReference_0_0() { return cReferenceIdReferenceCrossReference_0_0; }
		
		//ID
		public RuleCall getReferenceIdReferenceIDTerminalRuleCall_0_0_1() { return cReferenceIdReferenceIDTerminalRuleCall_0_0_1; }
		
		//{PrimaryExpression} integer=INTEGER
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_1_0() { return cPrimaryExpressionAction_1_0; }
		
		//integer=INTEGER
		public Assignment getIntegerAssignment_1_1() { return cIntegerAssignment_1_1; }
		
		//INTEGER
		public RuleCall getIntegerINTEGERTerminalRuleCall_1_1_0() { return cIntegerINTEGERTerminalRuleCall_1_1_0; }
		
		//{PrimaryExpression} floating=FLOAT
		public Group getGroup_2() { return cGroup_2; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_2_0() { return cPrimaryExpressionAction_2_0; }
		
		//floating=FLOAT
		public Assignment getFloatingAssignment_2_1() { return cFloatingAssignment_2_1; }
		
		//FLOAT
		public RuleCall getFloatingFLOATTerminalRuleCall_2_1_0() { return cFloatingFLOATTerminalRuleCall_2_1_0; }
		
		//{PrimaryExpression} bool=BOOL_LITERAL
		public Group getGroup_3() { return cGroup_3; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_3_0() { return cPrimaryExpressionAction_3_0; }
		
		//bool=BOOL_LITERAL
		public Assignment getBoolAssignment_3_1() { return cBoolAssignment_3_1; }
		
		//BOOL_LITERAL
		public RuleCall getBoolBOOL_LITERALTerminalRuleCall_3_1_0() { return cBoolBOOL_LITERALTerminalRuleCall_3_1_0; }
		
		//"(" nestedExpr=Expression ")"
		public Group getGroup_4() { return cGroup_4; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//nestedExpr=Expression
		public Assignment getNestedExprAssignment_4_1() { return cNestedExprAssignment_4_1; }
		
		//Expression
		public RuleCall getNestedExprExpressionParserRuleCall_4_1_0() { return cNestedExprExpressionParserRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPostfixOpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInfixOpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cUnaryOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cUnaryOpUnaryOpEnumRuleCall_4_0_0 = (RuleCall)cUnaryOpAssignment_4_0.eContents().get(0);
		private final Assignment cRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightCastExpressionParserRuleCall_4_1_0 = (RuleCall)cRightAssignment_4_1.eContents().get(0);
		
		//UnaryExpression:
		//    PrimaryExpression |
		//    FunctionCall |
		//    PostfixOp |
		//    InfixOp |
		//    unaryOp=UnaryOp right=CastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression |
		//FunctionCall |
		//PostfixOp |
		//InfixOp |
		//unaryOp=UnaryOp right=CastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_1() { return cFunctionCallParserRuleCall_1; }
		
		//PostfixOp
		public RuleCall getPostfixOpParserRuleCall_2() { return cPostfixOpParserRuleCall_2; }
		
		//InfixOp
		public RuleCall getInfixOpParserRuleCall_3() { return cInfixOpParserRuleCall_3; }
		
		//unaryOp=UnaryOp right=CastExpression
		public Group getGroup_4() { return cGroup_4; }
		
		//unaryOp=UnaryOp
		public Assignment getUnaryOpAssignment_4_0() { return cUnaryOpAssignment_4_0; }
		
		//UnaryOp
		public RuleCall getUnaryOpUnaryOpEnumRuleCall_4_0_0() { return cUnaryOpUnaryOpEnumRuleCall_4_0_0; }
		
		//right=CastExpression
		public Assignment getRightAssignment_4_1() { return cRightAssignment_4_1; }
		
		//CastExpression
		public RuleCall getRightCastExpressionParserRuleCall_4_1_0() { return cRightCastExpressionParserRuleCall_4_1_0; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.CastExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightCastExpressionParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//CastExpression:
		//    UnaryExpression |
		//    "(" type=Type ")" right=CastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression |
		//"(" type=Type ")" right=CastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//"(" type=Type ")" right=CastExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_1_0() { return cTypeTypeEnumRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//right=CastExpression
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }
		
		//CastExpression
		public RuleCall getRightCastExpressionParserRuleCall_1_3_0() { return cRightCastExpressionParserRuleCall_1_3_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCastExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicativeExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMulOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMulOpMultiplicativeOpEnumRuleCall_1_1_0 = (RuleCall)cMulOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCastExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression:
		//    CastExpression ({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CastExpression ({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*
		public Group getGroup() { return cGroup; }
		
		//CastExpression
		public RuleCall getCastExpressionParserRuleCall_0() { return cCastExpressionParserRuleCall_0; }
		
		//({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicativeExpression.left=current}
		public Action getMultiplicativeExpressionLeftAction_1_0() { return cMultiplicativeExpressionLeftAction_1_0; }
		
		//mulOp=MultiplicativeOp
		public Assignment getMulOpAssignment_1_1() { return cMulOpAssignment_1_1; }
		
		//MultiplicativeOp
		public RuleCall getMulOpMultiplicativeOpEnumRuleCall_1_1_0() { return cMulOpMultiplicativeOpEnumRuleCall_1_1_0; }
		
		//right=CastExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CastExpression
		public RuleCall getRightCastExpressionParserRuleCall_1_2_0() { return cRightCastExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditiveExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAddOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddOpAdditiveOpEnumRuleCall_1_1_0 = (RuleCall)cAddOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression:
		//    MultiplicativeExpression ({AdditiveExpression.left=current} addOp=AdditiveOp right=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({AdditiveExpression.left=current} addOp=AdditiveOp right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({AdditiveExpression.left=current} addOp=AdditiveOp right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdditiveExpression.left=current}
		public Action getAdditiveExpressionLeftAction_1_0() { return cAdditiveExpressionLeftAction_1_0; }
		
		//addOp=AdditiveOp
		public Assignment getAddOpAssignment_1_1() { return cAddOpAssignment_1_1; }
		
		//AdditiveOp
		public RuleCall getAddOpAdditiveOpEnumRuleCall_1_1_0() { return cAddOpAdditiveOpEnumRuleCall_1_1_0; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cShiftOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cShiftOpShiftOpEnumRuleCall_1_1_0 = (RuleCall)cShiftOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ShiftExpression:
		//    AdditiveExpression ({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ShiftExpression.left=current}
		public Action getShiftExpressionLeftAction_1_0() { return cShiftExpressionLeftAction_1_0; }
		
		//shiftOp=ShiftOp
		public Assignment getShiftOpAssignment_1_1() { return cShiftOpAssignment_1_1; }
		
		//ShiftOp
		public RuleCall getShiftOpShiftOpEnumRuleCall_1_1_0() { return cShiftOpShiftOpEnumRuleCall_1_1_0; }
		
		//right=ShiftExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ShiftExpression
		public RuleCall getRightShiftExpressionParserRuleCall_1_2_0() { return cRightShiftExpressionParserRuleCall_1_2_0; }
	}
	public class CompareExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.CompareExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckStateExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cShiftExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cCompareExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cCmpOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCmpOpCompareOpEnumRuleCall_1_1_1_0 = (RuleCall)cCmpOpAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightCompareExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//CompareExpression:
		//    CheckStateExpression |
		//    ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CheckStateExpression |
		//ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CheckStateExpression
		public RuleCall getCheckStateExpressionParserRuleCall_0() { return cCheckStateExpressionParserRuleCall_0; }
		
		//ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_1_0() { return cShiftExpressionParserRuleCall_1_0; }
		
		//({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{CompareExpression.left=current}
		public Action getCompareExpressionLeftAction_1_1_0() { return cCompareExpressionLeftAction_1_1_0; }
		
		//cmpOp=CompareOp
		public Assignment getCmpOpAssignment_1_1_1() { return cCmpOpAssignment_1_1_1; }
		
		//CompareOp
		public RuleCall getCmpOpCompareOpEnumRuleCall_1_1_1_0() { return cCmpOpCompareOpEnumRuleCall_1_1_1_0; }
		
		//right=CompareExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//CompareExpression
		public RuleCall getRightCompareExpressionParserRuleCall_1_1_2_0() { return cRightCompareExpressionParserRuleCall_1_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEqCmpOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqCmpOpCompareEqOpEnumRuleCall_1_1_0 = (RuleCall)cEqCmpOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression:
		//    CompareExpression ({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareExpression ({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//CompareExpression
		public RuleCall getCompareExpressionParserRuleCall_0() { return cCompareExpressionParserRuleCall_0; }
		
		//({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }
		
		//eqCmpOp=CompareEqOp
		public Assignment getEqCmpOpAssignment_1_1() { return cEqCmpOpAssignment_1_1; }
		
		//CompareEqOp
		public RuleCall getEqCmpOpCompareEqOpEnumRuleCall_1_1_0() { return cEqCmpOpCompareEqOpEnumRuleCall_1_1_0; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class BitAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BitAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBIT_ANDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitAndExpression:
		//    EqualityExpression ({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitAndExpression.left=current}
		public Action getBitAndExpressionLeftAction_1_0() { return cBitAndExpressionLeftAction_1_0; }
		
		//BIT_AND
		public RuleCall getBIT_ANDTerminalRuleCall_1_1() { return cBIT_ANDTerminalRuleCall_1_1; }
		
		//right=BitAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitAndExpression
		public RuleCall getRightBitAndExpressionParserRuleCall_1_2_0() { return cRightBitAndExpressionParserRuleCall_1_2_0; }
	}
	public class BitXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BitXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBIT_XORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitXorExpression:
		//    BitAndExpression ({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitAndExpression ({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*
		public Group getGroup() { return cGroup; }
		
		//BitAndExpression
		public RuleCall getBitAndExpressionParserRuleCall_0() { return cBitAndExpressionParserRuleCall_0; }
		
		//({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitXorExpression.left=current}
		public Action getBitXorExpressionLeftAction_1_0() { return cBitXorExpressionLeftAction_1_0; }
		
		//BIT_XOR
		public RuleCall getBIT_XORTerminalRuleCall_1_1() { return cBIT_XORTerminalRuleCall_1_1; }
		
		//right=BitXorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitXorExpression
		public RuleCall getRightBitXorExpressionParserRuleCall_1_2_0() { return cRightBitXorExpressionParserRuleCall_1_2_0; }
	}
	public class BitOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BitOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBIT_ORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitOrExpression:
		//    BitXorExpression ({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitXorExpression ({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//BitXorExpression
		public RuleCall getBitXorExpressionParserRuleCall_0() { return cBitXorExpressionParserRuleCall_0; }
		
		//({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitOrExpression.left=current}
		public Action getBitOrExpressionLeftAction_1_0() { return cBitOrExpressionLeftAction_1_0; }
		
		//BIT_OR
		public RuleCall getBIT_ORTerminalRuleCall_1_1() { return cBIT_ORTerminalRuleCall_1_1; }
		
		//right=BitOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitOrExpression
		public RuleCall getRightBitOrExpressionParserRuleCall_1_2_0() { return cRightBitOrExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLOGICAL_ANDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression:
		//    BitOrExpression ({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitOrExpression ({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//BitOrExpression
		public RuleCall getBitOrExpressionParserRuleCall_0() { return cBitOrExpressionParserRuleCall_0; }
		
		//({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalAndExpression.left=current}
		public Action getLogicalAndExpressionLeftAction_1_0() { return cLogicalAndExpressionLeftAction_1_0; }
		
		//LOGICAL_AND
		public RuleCall getLOGICAL_ANDTerminalRuleCall_1_1() { return cLOGICAL_ANDTerminalRuleCall_1_1; }
		
		//right=LogicalAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalAndExpression
		public RuleCall getRightLogicalAndExpressionParserRuleCall_1_2_0() { return cRightLogicalAndExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLOGICAL_ORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression:
		//    LogicalAndExpression ({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression ({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalOrExpression.left=current}
		public Action getLogicalOrExpressionLeftAction_1_0() { return cLogicalOrExpressionLeftAction_1_0; }
		
		//LOGICAL_OR
		public RuleCall getLOGICAL_ORTerminalRuleCall_1_1() { return cLOGICAL_ORTerminalRuleCall_1_1; }
		
		//right=LogicalOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalOrExpression
		public RuleCall getRightLogicalOrExpressionParserRuleCall_1_2_0() { return cRightLogicalOrExpressionParserRuleCall_1_2_0; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAssignVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cAssignVarIdReferenceCrossReference_0_0_0 = (CrossReference)cAssignVarAssignment_0_0.eContents().get(0);
		private final RuleCall cAssignVarIdReferenceIDTerminalRuleCall_0_0_0_1 = (RuleCall)cAssignVarIdReferenceCrossReference_0_0_0.eContents().get(1);
		private final Assignment cAssignOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAssignOpAssignOperatorEnumRuleCall_0_1_0 = (RuleCall)cAssignOpAssignment_0_1.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//AssignmentExpression:
		//    (assignVar=[IdReference] assignOp=AssignOperator)? expr=LogicalOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//(assignVar=[IdReference] assignOp=AssignOperator)? expr=LogicalOrExpression
		public Group getGroup() { return cGroup; }
		
		//(assignVar=[IdReference] assignOp=AssignOperator)?
		public Group getGroup_0() { return cGroup_0; }
		
		//assignVar=[IdReference]
		public Assignment getAssignVarAssignment_0_0() { return cAssignVarAssignment_0_0; }
		
		//[IdReference]
		public CrossReference getAssignVarIdReferenceCrossReference_0_0_0() { return cAssignVarIdReferenceCrossReference_0_0_0; }
		
		//ID
		public RuleCall getAssignVarIdReferenceIDTerminalRuleCall_0_0_0_1() { return cAssignVarIdReferenceIDTerminalRuleCall_0_0_0_1; }
		
		//assignOp=AssignOperator
		public Assignment getAssignOpAssignment_0_1() { return cAssignOpAssignment_0_1; }
		
		//AssignOperator
		public RuleCall getAssignOpAssignOperatorEnumRuleCall_0_1_0() { return cAssignOpAssignOperatorEnumRuleCall_0_1_0; }
		
		//expr=LogicalOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalOrExpression
		public RuleCall getExprLogicalOrExpressionParserRuleCall_1_0() { return cExprLogicalOrExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Expression");
		private final RuleCall cAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//    AssignmentExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall() { return cAssignmentExpressionParserRuleCall; }
	}
	
	public class PortTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.PortType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINPUT_ENEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINPUT_ENINPUTKeyword_0_0 = (Keyword)cINPUT_ENEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINPUT_RUEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINPUT_RUCyrillicCapitalLetterVeCyrillicCapitalLetterHaCyrillicCapitalLetterOCyrillicCapitalLetterDeKeyword_1_0 = (Keyword)cINPUT_RUEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUT_ENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOUTPUT_ENOUTPUTKeyword_2_0 = (Keyword)cOUTPUT_ENEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUT_RUEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOUTPUT_RUCyrillicCapitalLetterVeCyrillicCapitalLetterYeruCyrillicCapitalLetterHaCyrillicCapitalLetterOCyrillicCapitalLetterDeKeyword_3_0 = (Keyword)cOUTPUT_RUEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PortType:
		//    INPUT_EN='INPUT' | INPUT_RU='¬’Œƒ' |
		//    OUTPUT_EN='OUTPUT' | OUTPUT_RU='¬€’Œƒ';
		public EnumRule getRule() { return rule; }
		
		//INPUT_EN='INPUT' | INPUT_RU='¬’Œƒ' |
		//OUTPUT_EN='OUTPUT' | OUTPUT_RU='¬€’Œƒ'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INPUT_EN='INPUT'
		public EnumLiteralDeclaration getINPUT_ENEnumLiteralDeclaration_0() { return cINPUT_ENEnumLiteralDeclaration_0; }
		
		//'INPUT'
		public Keyword getINPUT_ENINPUTKeyword_0_0() { return cINPUT_ENINPUTKeyword_0_0; }
		
		//INPUT_RU='¬’Œƒ'
		public EnumLiteralDeclaration getINPUT_RUEnumLiteralDeclaration_1() { return cINPUT_RUEnumLiteralDeclaration_1; }
		
		//'¬’Œƒ'
		public Keyword getINPUT_RUCyrillicCapitalLetterVeCyrillicCapitalLetterHaCyrillicCapitalLetterOCyrillicCapitalLetterDeKeyword_1_0() { return cINPUT_RUCyrillicCapitalLetterVeCyrillicCapitalLetterHaCyrillicCapitalLetterOCyrillicCapitalLetterDeKeyword_1_0; }
		
		//OUTPUT_EN='OUTPUT'
		public EnumLiteralDeclaration getOUTPUT_ENEnumLiteralDeclaration_2() { return cOUTPUT_ENEnumLiteralDeclaration_2; }
		
		//'OUTPUT'
		public Keyword getOUTPUT_ENOUTPUTKeyword_2_0() { return cOUTPUT_ENOUTPUTKeyword_2_0; }
		
		//OUTPUT_RU='¬€’Œƒ'
		public EnumLiteralDeclaration getOUTPUT_RUEnumLiteralDeclaration_3() { return cOUTPUT_RUEnumLiteralDeclaration_3; }
		
		//'¬€’Œƒ'
		public Keyword getOUTPUT_RUCyrillicCapitalLetterVeCyrillicCapitalLetterYeruCyrillicCapitalLetterHaCyrillicCapitalLetterOCyrillicCapitalLetterDeKeyword_3_0() { return cOUTPUT_RUCyrillicCapitalLetterVeCyrillicCapitalLetterYeruCyrillicCapitalLetterHaCyrillicCapitalLetterOCyrillicCapitalLetterDeKeyword_3_0; }
	}
	public class StateQualifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.StateQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cACTIVE_ENEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cACTIVE_ENACTIVEKeyword_0_0 = (Keyword)cACTIVE_ENEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cACTIVE_RUEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cACTIVE_RUCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterTeCyrillicCapitalLetterICyrillicCapitalLetterVeCyrillicCapitalLetterEnCyrillicCapitalLetterOCyrillicCapitalLetterIeKeyword_1_0 = (Keyword)cACTIVE_RUEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPASSIVE_ENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPASSIVE_ENPASSIVEKeyword_2_0 = (Keyword)cPASSIVE_ENEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPASSIVE_RUEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPASSIVE_RUCyrillicCapitalLetterPeCyrillicCapitalLetterACyrillicCapitalLetterEsCyrillicCapitalLetterEsCyrillicCapitalLetterICyrillicCapitalLetterVeCyrillicCapitalLetterEnCyrillicCapitalLetterOCyrillicCapitalLetterIeKeyword_3_0 = (Keyword)cPASSIVE_RUEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTOP_ENEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTOP_ENSTOPKeyword_4_0 = (Keyword)cSTOP_ENEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSTOP_RUEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSTOP_RUCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOCyrillicCapitalLetterPeKeyword_5_0 = (Keyword)cSTOP_RUEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cERROR_ENEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cERROR_ENERRORKeyword_6_0 = (Keyword)cERROR_ENEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cERROR_RUEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cERROR_RUCyrillicCapitalLetterOCyrillicCapitalLetterShaCyrillicCapitalLetterICyrillicCapitalLetterBeCyrillicCapitalLetterKaCyrillicCapitalLetterAKeyword_7_0 = (Keyword)cERROR_RUEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum StateQualifier:
		//    ACTIVE_EN="ACTIVE" | ACTIVE_RU="¿ “»¬ÕŒ≈" |
		//    PASSIVE_EN="PASSIVE" | PASSIVE_RU="œ¿——»¬ÕŒ≈" |
		//    STOP_EN="STOP" | STOP_RU="—“Œœ" |
		//    ERROR_EN="ERROR" | ERROR_RU="Œÿ»¡ ¿";
		public EnumRule getRule() { return rule; }
		
		//ACTIVE_EN="ACTIVE" | ACTIVE_RU="¿ “»¬ÕŒ≈" |
		//PASSIVE_EN="PASSIVE" | PASSIVE_RU="œ¿——»¬ÕŒ≈" |
		//STOP_EN="STOP" | STOP_RU="—“Œœ" |
		//ERROR_EN="ERROR" | ERROR_RU="Œÿ»¡ ¿"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ACTIVE_EN="ACTIVE"
		public EnumLiteralDeclaration getACTIVE_ENEnumLiteralDeclaration_0() { return cACTIVE_ENEnumLiteralDeclaration_0; }
		
		//"ACTIVE"
		public Keyword getACTIVE_ENACTIVEKeyword_0_0() { return cACTIVE_ENACTIVEKeyword_0_0; }
		
		//ACTIVE_RU="¿ “»¬ÕŒ≈"
		public EnumLiteralDeclaration getACTIVE_RUEnumLiteralDeclaration_1() { return cACTIVE_RUEnumLiteralDeclaration_1; }
		
		//"¿ “»¬ÕŒ≈"
		public Keyword getACTIVE_RUCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterTeCyrillicCapitalLetterICyrillicCapitalLetterVeCyrillicCapitalLetterEnCyrillicCapitalLetterOCyrillicCapitalLetterIeKeyword_1_0() { return cACTIVE_RUCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterTeCyrillicCapitalLetterICyrillicCapitalLetterVeCyrillicCapitalLetterEnCyrillicCapitalLetterOCyrillicCapitalLetterIeKeyword_1_0; }
		
		//PASSIVE_EN="PASSIVE"
		public EnumLiteralDeclaration getPASSIVE_ENEnumLiteralDeclaration_2() { return cPASSIVE_ENEnumLiteralDeclaration_2; }
		
		//"PASSIVE"
		public Keyword getPASSIVE_ENPASSIVEKeyword_2_0() { return cPASSIVE_ENPASSIVEKeyword_2_0; }
		
		//PASSIVE_RU="œ¿——»¬ÕŒ≈"
		public EnumLiteralDeclaration getPASSIVE_RUEnumLiteralDeclaration_3() { return cPASSIVE_RUEnumLiteralDeclaration_3; }
		
		//"œ¿——»¬ÕŒ≈"
		public Keyword getPASSIVE_RUCyrillicCapitalLetterPeCyrillicCapitalLetterACyrillicCapitalLetterEsCyrillicCapitalLetterEsCyrillicCapitalLetterICyrillicCapitalLetterVeCyrillicCapitalLetterEnCyrillicCapitalLetterOCyrillicCapitalLetterIeKeyword_3_0() { return cPASSIVE_RUCyrillicCapitalLetterPeCyrillicCapitalLetterACyrillicCapitalLetterEsCyrillicCapitalLetterEsCyrillicCapitalLetterICyrillicCapitalLetterVeCyrillicCapitalLetterEnCyrillicCapitalLetterOCyrillicCapitalLetterIeKeyword_3_0; }
		
		//STOP_EN="STOP"
		public EnumLiteralDeclaration getSTOP_ENEnumLiteralDeclaration_4() { return cSTOP_ENEnumLiteralDeclaration_4; }
		
		//"STOP"
		public Keyword getSTOP_ENSTOPKeyword_4_0() { return cSTOP_ENSTOPKeyword_4_0; }
		
		//STOP_RU="—“Œœ"
		public EnumLiteralDeclaration getSTOP_RUEnumLiteralDeclaration_5() { return cSTOP_RUEnumLiteralDeclaration_5; }
		
		//"—“Œœ"
		public Keyword getSTOP_RUCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOCyrillicCapitalLetterPeKeyword_5_0() { return cSTOP_RUCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOCyrillicCapitalLetterPeKeyword_5_0; }
		
		//ERROR_EN="ERROR"
		public EnumLiteralDeclaration getERROR_ENEnumLiteralDeclaration_6() { return cERROR_ENEnumLiteralDeclaration_6; }
		
		//"ERROR"
		public Keyword getERROR_ENERRORKeyword_6_0() { return cERROR_ENERRORKeyword_6_0; }
		
		//ERROR_RU="Œÿ»¡ ¿"
		public EnumLiteralDeclaration getERROR_RUEnumLiteralDeclaration_7() { return cERROR_RUEnumLiteralDeclaration_7; }
		
		//"Œÿ»¡ ¿"
		public Keyword getERROR_RUCyrillicCapitalLetterOCyrillicCapitalLetterShaCyrillicCapitalLetterICyrillicCapitalLetterBeCyrillicCapitalLetterKaCyrillicCapitalLetterAKeyword_7_0() { return cERROR_RUCyrillicCapitalLetterOCyrillicCapitalLetterShaCyrillicCapitalLetterICyrillicCapitalLetterBeCyrillicCapitalLetterKaCyrillicCapitalLetterAKeyword_7_0; }
	}
	public class InfixPostfixOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.InfixPostfixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCPlusSignPlusSignKeyword_0_0 = (Keyword)cINCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cDECEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InfixPostfixOp:
		//    INC="++" | DEC="--";
		public EnumRule getRule() { return rule; }
		
		//INC="++" | DEC="--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INC="++"
		public EnumLiteralDeclaration getINCEnumLiteralDeclaration_0() { return cINCEnumLiteralDeclaration_0; }
		
		//"++"
		public Keyword getINCPlusSignPlusSignKeyword_0_0() { return cINCPlusSignPlusSignKeyword_0_0; }
		
		//DEC="--"
		public EnumLiteralDeclaration getDECEnumLiteralDeclaration_1() { return cDECEnumLiteralDeclaration_1; }
		
		//"--"
		public Keyword getDECHyphenMinusHyphenMinusKeyword_1_0() { return cDECHyphenMinusHyphenMinusKeyword_1_0; }
	}
	public class AssignOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.AssignOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNEqualsSignKeyword_0_0 = (Keyword)cASSIGNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMULAsteriskEqualsSignKeyword_1_0 = (Keyword)cMULEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDIVSolidusEqualsSignKeyword_2_0 = (Keyword)cDIVEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMODPlusSignEqualsSignKeyword_3_0 = (Keyword)cMODEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSUBHyphenMinusEqualsSignKeyword_4_0 = (Keyword)cSUBEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCINEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCINLessThanSignLessThanSignEqualsSignKeyword_5_0 = (Keyword)cCINEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCOUTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCOUTGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0 = (Keyword)cCOUTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_ANDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBIT_ANDAmpersandEqualsSignKeyword_7_0 = (Keyword)cBIT_ANDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_XOREnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBIT_XORCircumflexAccentEqualsSignKeyword_8_0 = (Keyword)cBIT_XOREnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_OREnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBIT_ORVerticalLineEqualsSignKeyword_9_0 = (Keyword)cBIT_OREnumLiteralDeclaration_9.eContents().get(0);
		
		//enum AssignOperator:
		//    ASSIGN="=" | MUL="*=" | DIV="/=" | MOD="+=" | SUB="-=" | CIN="<<=" |
		//    COUT=">>=" | BIT_AND="&=" | BIT_XOR="^=" | BIT_OR="|=";
		public EnumRule getRule() { return rule; }
		
		//ASSIGN="=" | MUL="*=" | DIV="/=" | MOD="+=" | SUB="-=" | CIN="<<=" |
		//COUT=">>=" | BIT_AND="&=" | BIT_XOR="^=" | BIT_OR="|="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASSIGN="="
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration_0() { return cASSIGNEnumLiteralDeclaration_0; }
		
		//"="
		public Keyword getASSIGNEqualsSignKeyword_0_0() { return cASSIGNEqualsSignKeyword_0_0; }
		
		//MUL="*="
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_1() { return cMULEnumLiteralDeclaration_1; }
		
		//"*="
		public Keyword getMULAsteriskEqualsSignKeyword_1_0() { return cMULAsteriskEqualsSignKeyword_1_0; }
		
		//DIV="/="
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_2() { return cDIVEnumLiteralDeclaration_2; }
		
		//"/="
		public Keyword getDIVSolidusEqualsSignKeyword_2_0() { return cDIVSolidusEqualsSignKeyword_2_0; }
		
		//MOD="+="
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_3() { return cMODEnumLiteralDeclaration_3; }
		
		//"+="
		public Keyword getMODPlusSignEqualsSignKeyword_3_0() { return cMODPlusSignEqualsSignKeyword_3_0; }
		
		//SUB="-="
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_4() { return cSUBEnumLiteralDeclaration_4; }
		
		//"-="
		public Keyword getSUBHyphenMinusEqualsSignKeyword_4_0() { return cSUBHyphenMinusEqualsSignKeyword_4_0; }
		
		//CIN="<<="
		public EnumLiteralDeclaration getCINEnumLiteralDeclaration_5() { return cCINEnumLiteralDeclaration_5; }
		
		//"<<="
		public Keyword getCINLessThanSignLessThanSignEqualsSignKeyword_5_0() { return cCINLessThanSignLessThanSignEqualsSignKeyword_5_0; }
		
		//COUT=">>="
		public EnumLiteralDeclaration getCOUTEnumLiteralDeclaration_6() { return cCOUTEnumLiteralDeclaration_6; }
		
		//">>="
		public Keyword getCOUTGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0() { return cCOUTGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0; }
		
		//BIT_AND="&="
		public EnumLiteralDeclaration getBIT_ANDEnumLiteralDeclaration_7() { return cBIT_ANDEnumLiteralDeclaration_7; }
		
		//"&="
		public Keyword getBIT_ANDAmpersandEqualsSignKeyword_7_0() { return cBIT_ANDAmpersandEqualsSignKeyword_7_0; }
		
		//BIT_XOR="^="
		public EnumLiteralDeclaration getBIT_XOREnumLiteralDeclaration_8() { return cBIT_XOREnumLiteralDeclaration_8; }
		
		//"^="
		public Keyword getBIT_XORCircumflexAccentEqualsSignKeyword_8_0() { return cBIT_XORCircumflexAccentEqualsSignKeyword_8_0; }
		
		//BIT_OR="|="
		public EnumLiteralDeclaration getBIT_OREnumLiteralDeclaration_9() { return cBIT_OREnumLiteralDeclaration_9; }
		
		//"|="
		public Keyword getBIT_ORVerticalLineEqualsSignKeyword_9_0() { return cBIT_ORVerticalLineEqualsSignKeyword_9_0; }
	}
	public class UnaryOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_NOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBIT_NOTTildeKeyword_2_0 = (Keyword)cBIT_NOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLOGICAL_NOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLOGICAL_NOTExclamationMarkKeyword_3_0 = (Keyword)cLOGICAL_NOTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UnaryOp:
		//    PLUS="+" | MINUS="-" | BIT_NOT="~" | LOGICAL_NOT="!";
		public EnumRule getRule() { return rule; }
		
		//PLUS="+" | MINUS="-" | BIT_NOT="~" | LOGICAL_NOT="!"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
		
		//BIT_NOT="~"
		public EnumLiteralDeclaration getBIT_NOTEnumLiteralDeclaration_2() { return cBIT_NOTEnumLiteralDeclaration_2; }
		
		//"~"
		public Keyword getBIT_NOTTildeKeyword_2_0() { return cBIT_NOTTildeKeyword_2_0; }
		
		//LOGICAL_NOT="!"
		public EnumLiteralDeclaration getLOGICAL_NOTEnumLiteralDeclaration_3() { return cLOGICAL_NOTEnumLiteralDeclaration_3; }
		
		//"!"
		public Keyword getLOGICAL_NOTExclamationMarkKeyword_3_0() { return cLOGICAL_NOTExclamationMarkKeyword_3_0; }
	}
	public class CompareOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.CompareOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_EQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLESS_EQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompareOp:
		//    LESS="<" | GREATER=">" | LESS_EQ="<=" | GREATER_EQ=">=";
		public EnumRule getRule() { return rule; }
		
		//LESS="<" | GREATER=">" | LESS_EQ="<=" | GREATER_EQ=">="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS="<"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//">"
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }
		
		//LESS_EQ="<="
		public EnumLiteralDeclaration getLESS_EQEnumLiteralDeclaration_2() { return cLESS_EQEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLESS_EQLessThanSignEqualsSignKeyword_2_0() { return cLESS_EQLessThanSignEqualsSignKeyword_2_0; }
		
		//GREATER_EQ=">="
		public EnumLiteralDeclaration getGREATER_EQEnumLiteralDeclaration_3() { return cGREATER_EQEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGREATER_EQGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQGreaterThanSignEqualsSignKeyword_3_0; }
	}
	public class CompareEqOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.CompareEqOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CompareEqOp:
		//    EQ="==" | NOT_EQ="!=";
		public EnumRule getRule() { return rule; }
		
		//EQ="==" | NOT_EQ="!="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NOT_EQ="!="
		public EnumLiteralDeclaration getNOT_EQEnumLiteralDeclaration_1() { return cNOT_EQEnumLiteralDeclaration_1; }
		
		//"!="
		public Keyword getNOT_EQExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class ShiftOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ShiftOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFT_SHIFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFT_SHIFTGreaterThanSignGreaterThanSignKeyword_0_0 = (Keyword)cLEFT_SHIFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHT_SHIFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHT_SHIFTLessThanSignLessThanSignKeyword_1_0 = (Keyword)cRIGHT_SHIFTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ShiftOp:
		//    LEFT_SHIFT=">>" | RIGHT_SHIFT="<<";
		public EnumRule getRule() { return rule; }
		
		//LEFT_SHIFT=">>" | RIGHT_SHIFT="<<"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_SHIFT=">>"
		public EnumLiteralDeclaration getLEFT_SHIFTEnumLiteralDeclaration_0() { return cLEFT_SHIFTEnumLiteralDeclaration_0; }
		
		//">>"
		public Keyword getLEFT_SHIFTGreaterThanSignGreaterThanSignKeyword_0_0() { return cLEFT_SHIFTGreaterThanSignGreaterThanSignKeyword_0_0; }
		
		//RIGHT_SHIFT="<<"
		public EnumLiteralDeclaration getRIGHT_SHIFTEnumLiteralDeclaration_1() { return cRIGHT_SHIFTEnumLiteralDeclaration_1; }
		
		//"<<"
		public Keyword getRIGHT_SHIFTLessThanSignLessThanSignKeyword_1_0() { return cRIGHT_SHIFTLessThanSignLessThanSignKeyword_1_0; }
	}
	public class AdditiveOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.AdditiveOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOp:
		//    PLUS="+" | MINUS="-";
		public EnumRule getRule() { return rule; }
		
		//PLUS="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	public class MultiplicativeOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.MultiplicativeOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULAsteriskKeyword_0_0 = (Keyword)cMULEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODPercentSignKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOp:
		//    MUL="*" | DIV="/" | MOD="%";
		public EnumRule getRule() { return rule; }
		
		//MUL="*" | DIV="/" | MOD="%"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MUL="*"
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_0() { return cMULEnumLiteralDeclaration_0; }
		
		//"*"
		public Keyword getMULAsteriskKeyword_0_0() { return cMULAsteriskKeyword_0_0; }
		
		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//"/"
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
		
		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }
		
		//"%"
		public Keyword getMODPercentSignKeyword_2_0() { return cMODPercentSignKeyword_2_0; }
	}
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVOID_ENEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVOID_ENVOIDKeyword_0_0 = (Keyword)cVOID_ENEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVOID_RUEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVOID_RUCyrillicCapitalLetterPeCyrillicCapitalLetterUCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOKeyword_1_0 = (Keyword)cVOID_RUEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFLOAT_ENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFLOAT_ENFLOATKeyword_2_0 = (Keyword)cFLOAT_ENEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFLOAT_RUEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFLOAT_RUCyrillicCapitalLetterPeCyrillicCapitalLetterElCyrillicCapitalLetterACyrillicCapitalLetterVeKeyword_3_0 = (Keyword)cFLOAT_RUEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLE_ENEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDOUBLE_ENDOUBLEKeyword_4_0 = (Keyword)cDOUBLE_ENEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLE_RUEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDOUBLE_RUCyrillicCapitalLetterDeCyrillicCapitalLetterPeCyrillicCapitalLetterElCyrillicCapitalLetterACyrillicCapitalLetterVeKeyword_5_0 = (Keyword)cDOUBLE_RUEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSHORT_ENEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSHORT_ENSHORTKeyword_6_0 = (Keyword)cSHORT_ENEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSHORT_RUEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSHORT_RUCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_7_0 = (Keyword)cSHORT_RUEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUSHORT_ENEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUSHORT_ENUNSIGNEDSHORTKeyword_8_0 = (Keyword)cUSHORT_ENEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cUSHORT_RUEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cUSHORT_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_9_0 = (Keyword)cUSHORT_RUEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cINT_ENEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cINT_ENINTKeyword_10_0 = (Keyword)cINT_ENEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cINT_RUEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cINT_RUCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_11_0 = (Keyword)cINT_RUEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cUINT_ENEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cUINT_ENUNSIGNEDINTKeyword_12_0 = (Keyword)cUINT_ENEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cUINT_RUEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cUINT_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_13_0 = (Keyword)cUINT_RUEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cLONG_ENEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cLONG_ENLONGKeyword_14_0 = (Keyword)cLONG_ENEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cLONG_RUEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cLONG_RUCyrillicCapitalLetterDeCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_15_0 = (Keyword)cLONG_RUEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cULONG_ENEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cULONG_ENUNSIGNEDLONGKeyword_16_0 = (Keyword)cULONG_ENEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cULONG_RUEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cULONG_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterDeCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_17_0 = (Keyword)cULONG_RUEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cBOOL_ENEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cBOOL_ENLOGKeyword_18_0 = (Keyword)cBOOL_ENEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cBOOL_RUEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cBOOL_RUCyrillicCapitalLetterElCyrillicCapitalLetterOCyrillicCapitalLetterGheKeyword_19_0 = (Keyword)cBOOL_RUEnumLiteralDeclaration_19.eContents().get(0);
		
		//        // Types
		//enum Type:
		//    VOID_EN="VOID" | VOID_RU="œ”—“Œ" |
		//    FLOAT_EN="FLOAT" | FLOAT_RU="œÀ¿¬" |
		//    DOUBLE_EN="DOUBLE" | DOUBLE_RU="ƒœÀ¿¬" |
		//    SHORT_EN="SHORT" | SHORT_RU=" ÷≈À" |
		//    USHORT_EN="UNSIGNED SHORT" | USHORT_RU="¡≈««Õ¿ Œ¬Œ≈  ÷≈À" |
		//    INT_EN="INT" | INT_RU="÷≈À" |
		//    UINT_EN="UNSIGNED INT" | UINT_RU="¡≈««Õ¿ Œ¬Œ≈ ÷≈À" |
		//    LONG_EN="LONG" | LONG_RU="ƒ÷≈À" |
		//    ULONG_EN="UNSIGNED LONG" | ULONG_RU="¡≈««Õ¿ Œ¬Œ≈ ƒ÷≈À" |
		//    BOOL_EN="LOG" | BOOL_RU="ÀŒ√";
		public EnumRule getRule() { return rule; }
		
		//VOID_EN="VOID" | VOID_RU="œ”—“Œ" |
		//FLOAT_EN="FLOAT" | FLOAT_RU="œÀ¿¬" |
		//DOUBLE_EN="DOUBLE" | DOUBLE_RU="ƒœÀ¿¬" |
		//SHORT_EN="SHORT" | SHORT_RU=" ÷≈À" |
		//USHORT_EN="UNSIGNED SHORT" | USHORT_RU="¡≈««Õ¿ Œ¬Œ≈  ÷≈À" |
		//INT_EN="INT" | INT_RU="÷≈À" |
		//UINT_EN="UNSIGNED INT" | UINT_RU="¡≈««Õ¿ Œ¬Œ≈ ÷≈À" |
		//LONG_EN="LONG" | LONG_RU="ƒ÷≈À" |
		//ULONG_EN="UNSIGNED LONG" | ULONG_RU="¡≈««Õ¿ Œ¬Œ≈ ƒ÷≈À" |
		//BOOL_EN="LOG" | BOOL_RU="ÀŒ√"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VOID_EN="VOID"
		public EnumLiteralDeclaration getVOID_ENEnumLiteralDeclaration_0() { return cVOID_ENEnumLiteralDeclaration_0; }
		
		//"VOID"
		public Keyword getVOID_ENVOIDKeyword_0_0() { return cVOID_ENVOIDKeyword_0_0; }
		
		//VOID_RU="œ”—“Œ"
		public EnumLiteralDeclaration getVOID_RUEnumLiteralDeclaration_1() { return cVOID_RUEnumLiteralDeclaration_1; }
		
		//"œ”—“Œ"
		public Keyword getVOID_RUCyrillicCapitalLetterPeCyrillicCapitalLetterUCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOKeyword_1_0() { return cVOID_RUCyrillicCapitalLetterPeCyrillicCapitalLetterUCyrillicCapitalLetterEsCyrillicCapitalLetterTeCyrillicCapitalLetterOKeyword_1_0; }
		
		//FLOAT_EN="FLOAT"
		public EnumLiteralDeclaration getFLOAT_ENEnumLiteralDeclaration_2() { return cFLOAT_ENEnumLiteralDeclaration_2; }
		
		//"FLOAT"
		public Keyword getFLOAT_ENFLOATKeyword_2_0() { return cFLOAT_ENFLOATKeyword_2_0; }
		
		//FLOAT_RU="œÀ¿¬"
		public EnumLiteralDeclaration getFLOAT_RUEnumLiteralDeclaration_3() { return cFLOAT_RUEnumLiteralDeclaration_3; }
		
		//"œÀ¿¬"
		public Keyword getFLOAT_RUCyrillicCapitalLetterPeCyrillicCapitalLetterElCyrillicCapitalLetterACyrillicCapitalLetterVeKeyword_3_0() { return cFLOAT_RUCyrillicCapitalLetterPeCyrillicCapitalLetterElCyrillicCapitalLetterACyrillicCapitalLetterVeKeyword_3_0; }
		
		//DOUBLE_EN="DOUBLE"
		public EnumLiteralDeclaration getDOUBLE_ENEnumLiteralDeclaration_4() { return cDOUBLE_ENEnumLiteralDeclaration_4; }
		
		//"DOUBLE"
		public Keyword getDOUBLE_ENDOUBLEKeyword_4_0() { return cDOUBLE_ENDOUBLEKeyword_4_0; }
		
		//DOUBLE_RU="ƒœÀ¿¬"
		public EnumLiteralDeclaration getDOUBLE_RUEnumLiteralDeclaration_5() { return cDOUBLE_RUEnumLiteralDeclaration_5; }
		
		//"ƒœÀ¿¬"
		public Keyword getDOUBLE_RUCyrillicCapitalLetterDeCyrillicCapitalLetterPeCyrillicCapitalLetterElCyrillicCapitalLetterACyrillicCapitalLetterVeKeyword_5_0() { return cDOUBLE_RUCyrillicCapitalLetterDeCyrillicCapitalLetterPeCyrillicCapitalLetterElCyrillicCapitalLetterACyrillicCapitalLetterVeKeyword_5_0; }
		
		//SHORT_EN="SHORT"
		public EnumLiteralDeclaration getSHORT_ENEnumLiteralDeclaration_6() { return cSHORT_ENEnumLiteralDeclaration_6; }
		
		//"SHORT"
		public Keyword getSHORT_ENSHORTKeyword_6_0() { return cSHORT_ENSHORTKeyword_6_0; }
		
		//SHORT_RU=" ÷≈À"
		public EnumLiteralDeclaration getSHORT_RUEnumLiteralDeclaration_7() { return cSHORT_RUEnumLiteralDeclaration_7; }
		
		//" ÷≈À"
		public Keyword getSHORT_RUCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_7_0() { return cSHORT_RUCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_7_0; }
		
		//USHORT_EN="UNSIGNED SHORT"
		public EnumLiteralDeclaration getUSHORT_ENEnumLiteralDeclaration_8() { return cUSHORT_ENEnumLiteralDeclaration_8; }
		
		//"UNSIGNED SHORT"
		public Keyword getUSHORT_ENUNSIGNEDSHORTKeyword_8_0() { return cUSHORT_ENUNSIGNEDSHORTKeyword_8_0; }
		
		//USHORT_RU="¡≈««Õ¿ Œ¬Œ≈  ÷≈À"
		public EnumLiteralDeclaration getUSHORT_RUEnumLiteralDeclaration_9() { return cUSHORT_RUEnumLiteralDeclaration_9; }
		
		//"¡≈««Õ¿ Œ¬Œ≈  ÷≈À"
		public Keyword getUSHORT_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_9_0() { return cUSHORT_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterKaCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_9_0; }
		
		//INT_EN="INT"
		public EnumLiteralDeclaration getINT_ENEnumLiteralDeclaration_10() { return cINT_ENEnumLiteralDeclaration_10; }
		
		//"INT"
		public Keyword getINT_ENINTKeyword_10_0() { return cINT_ENINTKeyword_10_0; }
		
		//INT_RU="÷≈À"
		public EnumLiteralDeclaration getINT_RUEnumLiteralDeclaration_11() { return cINT_RUEnumLiteralDeclaration_11; }
		
		//"÷≈À"
		public Keyword getINT_RUCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_11_0() { return cINT_RUCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_11_0; }
		
		//UINT_EN="UNSIGNED INT"
		public EnumLiteralDeclaration getUINT_ENEnumLiteralDeclaration_12() { return cUINT_ENEnumLiteralDeclaration_12; }
		
		//"UNSIGNED INT"
		public Keyword getUINT_ENUNSIGNEDINTKeyword_12_0() { return cUINT_ENUNSIGNEDINTKeyword_12_0; }
		
		//UINT_RU="¡≈««Õ¿ Œ¬Œ≈ ÷≈À"
		public EnumLiteralDeclaration getUINT_RUEnumLiteralDeclaration_13() { return cUINT_RUEnumLiteralDeclaration_13; }
		
		//"¡≈««Õ¿ Œ¬Œ≈ ÷≈À"
		public Keyword getUINT_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_13_0() { return cUINT_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_13_0; }
		
		//LONG_EN="LONG"
		public EnumLiteralDeclaration getLONG_ENEnumLiteralDeclaration_14() { return cLONG_ENEnumLiteralDeclaration_14; }
		
		//"LONG"
		public Keyword getLONG_ENLONGKeyword_14_0() { return cLONG_ENLONGKeyword_14_0; }
		
		//LONG_RU="ƒ÷≈À"
		public EnumLiteralDeclaration getLONG_RUEnumLiteralDeclaration_15() { return cLONG_RUEnumLiteralDeclaration_15; }
		
		//"ƒ÷≈À"
		public Keyword getLONG_RUCyrillicCapitalLetterDeCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_15_0() { return cLONG_RUCyrillicCapitalLetterDeCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_15_0; }
		
		//ULONG_EN="UNSIGNED LONG"
		public EnumLiteralDeclaration getULONG_ENEnumLiteralDeclaration_16() { return cULONG_ENEnumLiteralDeclaration_16; }
		
		//"UNSIGNED LONG"
		public Keyword getULONG_ENUNSIGNEDLONGKeyword_16_0() { return cULONG_ENUNSIGNEDLONGKeyword_16_0; }
		
		//ULONG_RU="¡≈««Õ¿ Œ¬Œ≈ ƒ÷≈À"
		public EnumLiteralDeclaration getULONG_RUEnumLiteralDeclaration_17() { return cULONG_RUEnumLiteralDeclaration_17; }
		
		//"¡≈««Õ¿ Œ¬Œ≈ ƒ÷≈À"
		public Keyword getULONG_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterDeCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_17_0() { return cULONG_RUCyrillicCapitalLetterBeCyrillicCapitalLetterIeCyrillicCapitalLetterZeCyrillicCapitalLetterZeCyrillicCapitalLetterEnCyrillicCapitalLetterACyrillicCapitalLetterKaCyrillicCapitalLetterOCyrillicCapitalLetterVeCyrillicCapitalLetterOCyrillicCapitalLetterIeSpaceCyrillicCapitalLetterDeCyrillicCapitalLetterTseCyrillicCapitalLetterIeCyrillicCapitalLetterElKeyword_17_0; }
		
		//BOOL_EN="LOG"
		public EnumLiteralDeclaration getBOOL_ENEnumLiteralDeclaration_18() { return cBOOL_ENEnumLiteralDeclaration_18; }
		
		//"LOG"
		public Keyword getBOOL_ENLOGKeyword_18_0() { return cBOOL_ENLOGKeyword_18_0; }
		
		//BOOL_RU="ÀŒ√"
		public EnumLiteralDeclaration getBOOL_RUEnumLiteralDeclaration_19() { return cBOOL_RUEnumLiteralDeclaration_19; }
		
		//"ÀŒ√"
		public Keyword getBOOL_RUCyrillicCapitalLetterElCyrillicCapitalLetterOCyrillicCapitalLetterGheKeyword_19_0() { return cBOOL_RUCyrillicCapitalLetterElCyrillicCapitalLetterOCyrillicCapitalLetterGheKeyword_19_0; }
	}
	
	private final ProgramElements pProgram;
	private final ClockDefinitionElements pClockDefinition;
	private final ProcessElements pProcess;
	private final StateElements pState;
	private final ImportedVariableListElements pImportedVariableList;
	private final ProcessVariableElements pProcessVariable;
	private final PhysicalVariableElements pPhysicalVariable;
	private final PortMappingElements pPortMapping;
	private final PortElements pPort;
	private final PortTypeElements ePortType;
	private final ProgramVariableElements pProgramVariable;
	private final TimeoutFunctionElements pTimeoutFunction;
	private final TimeAmountOrRefElements pTimeAmountOrRef;
	private final FunctionElements pFunction;
	private final ConstElements pConst;
	private final EnumElements pEnum;
	private final EnumMemberElements pEnumMember;
	private final StatementElements pStatement;
	private final StatementSequenceElements pStatementSequence;
	private final CompoundStatementElements pCompoundStatement;
	private final IfElseStatElements pIfElseStat;
	private final SwitchStatElements pSwitchStat;
	private final CaseStatElements pCaseStat;
	private final DefaultStatElements pDefaultStat;
	private final SwitchOptionStatSequenceElements pSwitchOptionStatSequence;
	private final BreakStatElements pBreakStat;
	private final StartProcStatElements pStartProcStat;
	private final StopProcStatElements pStopProcStat;
	private final ErrorStatElements pErrorStat;
	private final RestartStatElements pRestartStat;
	private final ResetStatElements pResetStat;
	private final LoopStatElements pLoopStat;
	private final SetStateStatElements pSetStateStat;
	private final IdReferenceElements pIdReference;
	private final InfixOpElements pInfixOp;
	private final PostfixOpElements pPostfixOp;
	private final FunctionCallElements pFunctionCall;
	private final CheckStateExpressionElements pCheckStateExpression;
	private final StateQualifierElements eStateQualifier;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final CastExpressionElements pCastExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final CompareExpressionElements pCompareExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final BitAndExpressionElements pBitAndExpression;
	private final BitXorExpressionElements pBitXorExpression;
	private final BitOrExpressionElements pBitOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final ExpressionElements pExpression;
	private final InfixPostfixOpElements eInfixPostfixOp;
	private final AssignOperatorElements eAssignOperator;
	private final UnaryOpElements eUnaryOp;
	private final CompareOpElements eCompareOp;
	private final CompareEqOpElements eCompareEqOp;
	private final ShiftOpElements eShiftOp;
	private final AdditiveOpElements eAdditiveOp;
	private final MultiplicativeOpElements eMultiplicativeOp;
	private final TerminalRule tLOGICAL_OR;
	private final TerminalRule tLOGICAL_AND;
	private final TerminalRule tBIT_OR;
	private final TerminalRule tBIT_XOR;
	private final TerminalRule tBIT_AND;
	private final TypeElements eType;
	private final TerminalRule tINTEGER;
	private final TerminalRule tFLOAT;
	private final TerminalRule tDEC_FLOAT;
	private final TerminalRule tHEX_FLOAT;
	private final TerminalRule tDEC_SEQUENCE;
	private final TerminalRule tHEX_SEQUENCE;
	private final TerminalRule tBIN_EXPONENT;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tSIGN;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tOCTAL;
	private final TerminalRule tHEX;
	private final TerminalRule tHEX_PREFIX;
	private final TerminalRule tLONG;
	private final TerminalRule tFLOAT_SUFFIX;
	private final TerminalRule tUNSIGNED;
	private final TerminalRule tBOOL_LITERAL;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReflexOldGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pClockDefinition = new ClockDefinitionElements();
		this.pProcess = new ProcessElements();
		this.pState = new StateElements();
		this.pImportedVariableList = new ImportedVariableListElements();
		this.pProcessVariable = new ProcessVariableElements();
		this.pPhysicalVariable = new PhysicalVariableElements();
		this.pPortMapping = new PortMappingElements();
		this.pPort = new PortElements();
		this.ePortType = new PortTypeElements();
		this.pProgramVariable = new ProgramVariableElements();
		this.pTimeoutFunction = new TimeoutFunctionElements();
		this.pTimeAmountOrRef = new TimeAmountOrRefElements();
		this.pFunction = new FunctionElements();
		this.pConst = new ConstElements();
		this.pEnum = new EnumElements();
		this.pEnumMember = new EnumMemberElements();
		this.pStatement = new StatementElements();
		this.pStatementSequence = new StatementSequenceElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pIfElseStat = new IfElseStatElements();
		this.pSwitchStat = new SwitchStatElements();
		this.pCaseStat = new CaseStatElements();
		this.pDefaultStat = new DefaultStatElements();
		this.pSwitchOptionStatSequence = new SwitchOptionStatSequenceElements();
		this.pBreakStat = new BreakStatElements();
		this.pStartProcStat = new StartProcStatElements();
		this.pStopProcStat = new StopProcStatElements();
		this.pErrorStat = new ErrorStatElements();
		this.pRestartStat = new RestartStatElements();
		this.pResetStat = new ResetStatElements();
		this.pLoopStat = new LoopStatElements();
		this.pSetStateStat = new SetStateStatElements();
		this.pIdReference = new IdReferenceElements();
		this.pInfixOp = new InfixOpElements();
		this.pPostfixOp = new PostfixOpElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pCheckStateExpression = new CheckStateExpressionElements();
		this.eStateQualifier = new StateQualifierElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pCompareExpression = new CompareExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pBitAndExpression = new BitAndExpressionElements();
		this.pBitXorExpression = new BitXorExpressionElements();
		this.pBitOrExpression = new BitOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pExpression = new ExpressionElements();
		this.eInfixPostfixOp = new InfixPostfixOpElements();
		this.eAssignOperator = new AssignOperatorElements();
		this.eUnaryOp = new UnaryOpElements();
		this.eCompareOp = new CompareOpElements();
		this.eCompareEqOp = new CompareEqOpElements();
		this.eShiftOp = new ShiftOpElements();
		this.eAdditiveOp = new AdditiveOpElements();
		this.eMultiplicativeOp = new MultiplicativeOpElements();
		this.tLOGICAL_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.LOGICAL_OR");
		this.tLOGICAL_AND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.LOGICAL_AND");
		this.tBIT_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BIT_OR");
		this.tBIT_XOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BIT_XOR");
		this.tBIT_AND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BIT_AND");
		this.eType = new TypeElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.INTEGER");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.FLOAT");
		this.tDEC_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.DEC_FLOAT");
		this.tHEX_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.HEX_FLOAT");
		this.tDEC_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.DEC_SEQUENCE");
		this.tHEX_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.HEX_SEQUENCE");
		this.tBIN_EXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BIN_EXPONENT");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.EXPONENT");
		this.tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.SIGN");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.DECIMAL");
		this.tOCTAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.OCTAL");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.HEX");
		this.tHEX_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.HEX_PREFIX");
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.LONG");
		this.tFLOAT_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.FLOAT_SUFFIX");
		this.tUNSIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.UNSIGNED");
		this.tBOOL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.BOOL_LITERAL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflexold.ReflexOld.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ru.iaie.reflexold.ReflexOld".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    (en?="PROGR" | "œ–Œ√–") name=ID "{"
	//    clock=ClockDefinition
	//    (consts+=Const |
	//    enums+=Enum |
	//    functions+=Function |
	//    ports+=Port |
	//    processes+=Process)*
	//    "}";
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//ClockDefinition:
	//    ("TACT" | "“¿ “") value=INTEGER ";";
	public ClockDefinitionElements getClockDefinitionAccess() {
		return pClockDefinition;
	}
	
	public ParserRule getClockDefinitionRule() {
		return getClockDefinitionAccess().getRule();
	}
	
	//Process:
	//    ("PROC" | "œ–Œ÷") name=ID "{"
	//    ((imports+=ImportedVariableList | variables+=ProcessVariable) ";")* // imports+=ImportedVariableList
	//    states+=State*
	//    "}";
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//State:
	//    ("STATE" | "—Œ—“") name=ID "{"
	//    stateFunction=StatementSequence
	//    (timeoutFunction=TimeoutFunction)?
	//    "}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//ImportedVariableList:
	//    (("FROM" "PROC") | ("»«" "œ–Œ÷")) process=[Process]
	//    variables+=[ProcessVariable] ("," variables+=[ProcessVariable])*;
	public ImportedVariableListElements getImportedVariableListAccess() {
		return pImportedVariableList;
	}
	
	public ParserRule getImportedVariableListRule() {
		return getImportedVariableListAccess().getRule();
	}
	
	// // ProcessVariable
	//ProcessVariable:
	//    (PhysicalVariable | ProgramVariable)
	//    (
	//        (local?=("LOCAL" | "ÀŒ ¿À")) |
	//        (shared?=("FOR" | "ƒÀﬂ")
	//            (
	//                ("ALL" | "¬—≈’") |
	//                ((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
	//            )
	//        )
	//    );
	public ProcessVariableElements getProcessVariableAccess() {
		return pProcessVariable;
	}
	
	public ParserRule getProcessVariableRule() {
		return getProcessVariableAccess().getRule();
	}
	
	///*
	//ProcessVariable:
	//    (PhysicalVariable | ProgramVariable) (accessibility=VariableAccessibility)?;
	//VariableAccessibility:
	//    local?=("LOCAL" | "ÀŒ ¿À") |
	//    (shared?=("FOR" | "ƒÀﬂ")
	//        (
	//            ("ALL" | "¬—≈’") |
	//            ((("PROC") | ("œ–Œ÷")) processes+=[Process] ("," processes+=[Process])*)
	//        )
	//    );
	//*/
	//PhysicalVariable:
	//    type=Type name=ID "=" mapping=PortMapping;
	public PhysicalVariableElements getPhysicalVariableAccess() {
		return pPhysicalVariable;
	}
	
	public ParserRule getPhysicalVariableRule() {
		return getPhysicalVariableAccess().getRule();
	}
	
	//PortMapping:
	//    "{" port=[Port] "[" (bits=INTEGER) "]" "}";
	public PortMappingElements getPortMappingAccess() {
		return pPortMapping;
	}
	
	public ParserRule getPortMappingRule() {
		return getPortMappingAccess().getRule();
	}
	
	//Port:
	//    type=PortType name=ID addr1=INTEGER addr2=INTEGER size=INTEGER ";";
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//enum PortType:
	//    INPUT_EN='INPUT' | INPUT_RU='¬’Œƒ' |
	//    OUTPUT_EN='OUTPUT' | OUTPUT_RU='¬€’Œƒ';
	public PortTypeElements getPortTypeAccess() {
		return ePortType;
	}
	
	public EnumRule getPortTypeRule() {
		return getPortTypeAccess().getRule();
	}
	
	//ProgramVariable:
	//    type=Type name=ID;
	public ProgramVariableElements getProgramVariableAccess() {
		return pProgramVariable;
	}
	
	public ParserRule getProgramVariableRule() {
		return getProgramVariableAccess().getRule();
	}
	
	//TimeoutFunction:
	//    ("TIMEOUT" | "“¿…Ã¿”“") (TimeAmountOrRef | "(" TimeAmountOrRef ")") body=Statement;
	public TimeoutFunctionElements getTimeoutFunctionAccess() {
		return pTimeoutFunction;
	}
	
	public ParserRule getTimeoutFunctionRule() {
		return getTimeoutFunctionAccess().getRule();
	}
	
	//fragment TimeAmountOrRef:
	//    time=INTEGER | ref=[IdReference];
	public TimeAmountOrRefElements getTimeAmountOrRefAccess() {
		return pTimeAmountOrRef;
	}
	
	public ParserRule getTimeAmountOrRefRule() {
		return getTimeAmountOrRefAccess().getRule();
	}
	
	//Function:
	//    ("FUNCTION" | "‘”Õ ÷»ﬂ") returnType=Type name=ID "(" argTypes+=Type ("," argTypes+=Type)* ")" ";";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Const:
	//    ("CONST" | " ŒÕ—“") name=ID value=Expression ";";
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//Enum:
	//    ("ENUM" | "œ≈–≈◊»—À≈Õ»≈") "{" enumMembers+=EnumMember ("," enumMembers+=EnumMember)* "}" ";";
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//EnumMember:
	//    name=ID ("=" value=Expression)?;
	public EnumMemberElements getEnumMemberAccess() {
		return pEnumMember;
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}
	
	//        // Statements
	//Statement:
	//    {Statement} ";" | CompoundStatement | StartProcStat | StopProcStat |
	//    ErrorStat | RestartStat | ResetStat | LoopStat | SetStateStat |
	//    IfElseStat | SwitchStat | Expression ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//StatementSequence:
	//    {StatementSequence} statements+=Statement*;
	public StatementSequenceElements getStatementSequenceAccess() {
		return pStatementSequence;
	}
	
	public ParserRule getStatementSequenceRule() {
		return getStatementSequenceAccess().getRule();
	}
	
	//CompoundStatement:
	//    {CompoundStatement} "{" statements+=Statement* "}";
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}
	
	//IfElseStat:
	//    ("IF" | "≈—À»") "(" cond=Expression ")"
	//    then=Statement
	//    (=> ("ELSE" | "»Õ¿◊≈") else=Statement)?;
	public IfElseStatElements getIfElseStatAccess() {
		return pIfElseStat;
	}
	
	public ParserRule getIfElseStatRule() {
		return getIfElseStatAccess().getRule();
	}
	
	//SwitchStat:
	//    ("SWITCH" | "–¿«¡Œ–") "(" expr=Expression ")" "{"
	//    options+=CaseStat*
	//    defaultOption=DefaultStat?
	//    "}";
	public SwitchStatElements getSwitchStatAccess() {
		return pSwitchStat;
	}
	
	public ParserRule getSwitchStatRule() {
		return getSwitchStatAccess().getRule();
	}
	
	//CaseStat:
	//    ("CASE" | "—À”◊¿…") option=Expression ":" "{" SwitchOptionStatSequence "}";
	public CaseStatElements getCaseStatAccess() {
		return pCaseStat;
	}
	
	public ParserRule getCaseStatRule() {
		return getCaseStatAccess().getRule();
	}
	
	//DefaultStat:
	//    ("DEFAULT" | "”ÃŒÀ◊¿Õ»≈") ":" "{" SwitchOptionStatSequence "}";
	public DefaultStatElements getDefaultStatAccess() {
		return pDefaultStat;
	}
	
	public ParserRule getDefaultStatRule() {
		return getDefaultStatAccess().getRule();
	}
	
	//fragment SwitchOptionStatSequence:
	//    statements+=Statement* hasBreak?=BreakStat?;
	public SwitchOptionStatSequenceElements getSwitchOptionStatSequenceAccess() {
		return pSwitchOptionStatSequence;
	}
	
	public ParserRule getSwitchOptionStatSequenceRule() {
		return getSwitchOptionStatSequenceAccess().getRule();
	}
	
	//BreakStat:
	//    ("BREAK" | " ŒÕ≈÷") ";";
	public BreakStatElements getBreakStatAccess() {
		return pBreakStat;
	}
	
	public ParserRule getBreakStatRule() {
		return getBreakStatAccess().getRule();
	}
	
	//StartProcStat:
	//    ("START" | "—“¿–“") ("PROC" | "œ–Œ÷")? process=[Process] ";";
	public StartProcStatElements getStartProcStatAccess() {
		return pStartProcStat;
	}
	
	public ParserRule getStartProcStatRule() {
		return getStartProcStatAccess().getRule();
	}
	
	//StopProcStat:
	//    {StopProcStat} ("STOP" | "—“Œœ") (("PROC" | "œ–Œ÷")? (process=[Process]))? ";";
	public StopProcStatElements getStopProcStatAccess() {
		return pStopProcStat;
	}
	
	public ParserRule getStopProcStatRule() {
		return getStopProcStatAccess().getRule();
	}
	
	//ErrorStat:
	//    {ErrorStat} ("ERROR" | "Œÿ»¡ ¿") (("PROC" | "œ–Œ÷")? (process=[Process]))? ";";
	public ErrorStatElements getErrorStatAccess() {
		return pErrorStat;
	}
	
	public ParserRule getErrorStatRule() {
		return getErrorStatAccess().getRule();
	}
	
	//RestartStat:
	//    {RestartStat} (("RESTART" "PROC") | ("–≈—“¿–“" "œ–Œ÷")) ";";
	public RestartStatElements getRestartStatAccess() {
		return pRestartStat;
	}
	
	public ParserRule getRestartStatRule() {
		return getRestartStatAccess().getRule();
	}
	
	//ResetStat:
	//    {ResetStat} (("RESTART" "TIMER") | ("–≈—“¿–“" "“¿…Ã≈–")) ";";
	public ResetStatElements getResetStatAccess() {
		return pResetStat;
	}
	
	public ParserRule getResetStatRule() {
		return getResetStatAccess().getRule();
	}
	
	//LoopStat:
	//    {LoopStat} ("LOOP" | "«¿÷» À»“‹") ";";
	public LoopStatElements getLoopStatAccess() {
		return pLoopStat;
	}
	
	public ParserRule getLoopStatRule() {
		return getLoopStatAccess().getRule();
	}
	
	//SetStateStat:
	//    {SetStateStat} ("SET" | "¬")
	//    ((next?=("NEXT" | "—À≈ƒ”ﬁŸ≈≈")) | (("STATE" | "—Œ—“") state=[State])) ";";
	public SetStateStatElements getSetStateStatAccess() {
		return pSetStateStat;
	}
	
	public ParserRule getSetStateStatRule() {
		return getSetStateStatAccess().getRule();
	}
	
	//IdReference:
	//    PhysicalVariable | ProgramVariable | EnumMember | Const;
	public IdReferenceElements getIdReferenceAccess() {
		return pIdReference;
	}
	
	public ParserRule getIdReferenceRule() {
		return getIdReferenceAccess().getRule();
	}
	
	//        // Expressions
	//InfixOp:
	//    op=InfixPostfixOp ref=[IdReference];
	public InfixOpElements getInfixOpAccess() {
		return pInfixOp;
	}
	
	public ParserRule getInfixOpRule() {
		return getInfixOpAccess().getRule();
	}
	
	//PostfixOp:
	//    ref=[IdReference] op=InfixPostfixOp;
	public PostfixOpElements getPostfixOpAccess() {
		return pPostfixOp;
	}
	
	public ParserRule getPostfixOpRule() {
		return getPostfixOpAccess().getRule();
	}
	
	//FunctionCall:
	//    function=[Function] "(" (args+=Expression ("," args+=Expression)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//CheckStateExpression:
	//    ("PROC" | "œ–Œ÷") process=[Process] (("IN" "STATE") | ("¬" "—Œ—“")) qualfier=StateQualifier;
	public CheckStateExpressionElements getCheckStateExpressionAccess() {
		return pCheckStateExpression;
	}
	
	public ParserRule getCheckStateExpressionRule() {
		return getCheckStateExpressionAccess().getRule();
	}
	
	//enum StateQualifier:
	//    ACTIVE_EN="ACTIVE" | ACTIVE_RU="¿ “»¬ÕŒ≈" |
	//    PASSIVE_EN="PASSIVE" | PASSIVE_RU="œ¿——»¬ÕŒ≈" |
	//    STOP_EN="STOP" | STOP_RU="—“Œœ" |
	//    ERROR_EN="ERROR" | ERROR_RU="Œÿ»¡ ¿";
	public StateQualifierElements getStateQualifierAccess() {
		return eStateQualifier;
	}
	
	public EnumRule getStateQualifierRule() {
		return getStateQualifierAccess().getRule();
	}
	
	//PrimaryExpression:
	//    reference=[IdReference] |
	//    {PrimaryExpression} integer=INTEGER |
	//    {PrimaryExpression} floating=FLOAT |
	//    {PrimaryExpression} bool=BOOL_LITERAL |
	//    "(" nestedExpr=Expression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//UnaryExpression:
	//    PrimaryExpression |
	//    FunctionCall |
	//    PostfixOp |
	//    InfixOp |
	//    unaryOp=UnaryOp right=CastExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//CastExpression:
	//    UnaryExpression |
	//    "(" type=Type ")" right=CastExpression;
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression:
	//    CastExpression ({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//AdditiveExpression:
	//    MultiplicativeExpression ({AdditiveExpression.left=current} addOp=AdditiveOp right=AdditiveExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//ShiftExpression:
	//    AdditiveExpression ({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//CompareExpression:
	//    CheckStateExpression |
	//    ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*;
	public CompareExpressionElements getCompareExpressionAccess() {
		return pCompareExpression;
	}
	
	public ParserRule getCompareExpressionRule() {
		return getCompareExpressionAccess().getRule();
	}
	
	//EqualityExpression:
	//    CompareExpression ({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//BitAndExpression:
	//    EqualityExpression ({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*;
	public BitAndExpressionElements getBitAndExpressionAccess() {
		return pBitAndExpression;
	}
	
	public ParserRule getBitAndExpressionRule() {
		return getBitAndExpressionAccess().getRule();
	}
	
	//BitXorExpression:
	//    BitAndExpression ({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*;
	public BitXorExpressionElements getBitXorExpressionAccess() {
		return pBitXorExpression;
	}
	
	public ParserRule getBitXorExpressionRule() {
		return getBitXorExpressionAccess().getRule();
	}
	
	//BitOrExpression:
	//    BitXorExpression ({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*;
	public BitOrExpressionElements getBitOrExpressionAccess() {
		return pBitOrExpression;
	}
	
	public ParserRule getBitOrExpressionRule() {
		return getBitOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression:
	//    BitOrExpression ({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//LogicalOrExpression:
	//    LogicalAndExpression ({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//AssignmentExpression:
	//    (assignVar=[IdReference] assignOp=AssignOperator)? expr=LogicalOrExpression;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//Expression:
	//    AssignmentExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//enum InfixPostfixOp:
	//    INC="++" | DEC="--";
	public InfixPostfixOpElements getInfixPostfixOpAccess() {
		return eInfixPostfixOp;
	}
	
	public EnumRule getInfixPostfixOpRule() {
		return getInfixPostfixOpAccess().getRule();
	}
	
	//enum AssignOperator:
	//    ASSIGN="=" | MUL="*=" | DIV="/=" | MOD="+=" | SUB="-=" | CIN="<<=" |
	//    COUT=">>=" | BIT_AND="&=" | BIT_XOR="^=" | BIT_OR="|=";
	public AssignOperatorElements getAssignOperatorAccess() {
		return eAssignOperator;
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//enum UnaryOp:
	//    PLUS="+" | MINUS="-" | BIT_NOT="~" | LOGICAL_NOT="!";
	public UnaryOpElements getUnaryOpAccess() {
		return eUnaryOp;
	}
	
	public EnumRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}
	
	//enum CompareOp:
	//    LESS="<" | GREATER=">" | LESS_EQ="<=" | GREATER_EQ=">=";
	public CompareOpElements getCompareOpAccess() {
		return eCompareOp;
	}
	
	public EnumRule getCompareOpRule() {
		return getCompareOpAccess().getRule();
	}
	
	//enum CompareEqOp:
	//    EQ="==" | NOT_EQ="!=";
	public CompareEqOpElements getCompareEqOpAccess() {
		return eCompareEqOp;
	}
	
	public EnumRule getCompareEqOpRule() {
		return getCompareEqOpAccess().getRule();
	}
	
	//enum ShiftOp:
	//    LEFT_SHIFT=">>" | RIGHT_SHIFT="<<";
	public ShiftOpElements getShiftOpAccess() {
		return eShiftOp;
	}
	
	public EnumRule getShiftOpRule() {
		return getShiftOpAccess().getRule();
	}
	
	//enum AdditiveOp:
	//    PLUS="+" | MINUS="-";
	public AdditiveOpElements getAdditiveOpAccess() {
		return eAdditiveOp;
	}
	
	public EnumRule getAdditiveOpRule() {
		return getAdditiveOpAccess().getRule();
	}
	
	//enum MultiplicativeOp:
	//    MUL="*" | DIV="/" | MOD="%";
	public MultiplicativeOpElements getMultiplicativeOpAccess() {
		return eMultiplicativeOp;
	}
	
	public EnumRule getMultiplicativeOpRule() {
		return getMultiplicativeOpAccess().getRule();
	}
	
	//terminal LOGICAL_OR:
	//    "||";
	public TerminalRule getLOGICAL_ORRule() {
		return tLOGICAL_OR;
	}
	
	//terminal LOGICAL_AND:
	//    "&&";
	public TerminalRule getLOGICAL_ANDRule() {
		return tLOGICAL_AND;
	}
	
	//terminal BIT_OR:
	//    "|";
	public TerminalRule getBIT_ORRule() {
		return tBIT_OR;
	}
	
	//terminal BIT_XOR:
	//    "^";
	public TerminalRule getBIT_XORRule() {
		return tBIT_XOR;
	}
	
	//terminal BIT_AND:
	//    "&";
	public TerminalRule getBIT_ANDRule() {
		return tBIT_AND;
	}
	
	//        // Types
	//enum Type:
	//    VOID_EN="VOID" | VOID_RU="œ”—“Œ" |
	//    FLOAT_EN="FLOAT" | FLOAT_RU="œÀ¿¬" |
	//    DOUBLE_EN="DOUBLE" | DOUBLE_RU="ƒœÀ¿¬" |
	//    SHORT_EN="SHORT" | SHORT_RU=" ÷≈À" |
	//    USHORT_EN="UNSIGNED SHORT" | USHORT_RU="¡≈««Õ¿ Œ¬Œ≈  ÷≈À" |
	//    INT_EN="INT" | INT_RU="÷≈À" |
	//    UINT_EN="UNSIGNED INT" | UINT_RU="¡≈««Õ¿ Œ¬Œ≈ ÷≈À" |
	//    LONG_EN="LONG" | LONG_RU="ƒ÷≈À" |
	//    ULONG_EN="UNSIGNED LONG" | ULONG_RU="¡≈««Õ¿ Œ¬Œ≈ ƒ÷≈À" |
	//    BOOL_EN="LOG" | BOOL_RU="ÀŒ√";
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//        // Literals
	//terminal INTEGER:
	//    SIGN? (HEX | OCTAL | DECIMAL) (LONG | UNSIGNED)?;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal FLOAT:
	//    DEC_FLOAT | HEX_FLOAT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal fragment DEC_FLOAT:
	//    DEC_SEQUENCE? '.' DEC_SEQUENCE (EXPONENT SIGN DEC_SEQUENCE)? (LONG | FLOAT_SUFFIX)?;
	public TerminalRule getDEC_FLOATRule() {
		return tDEC_FLOAT;
	}
	
	//terminal fragment HEX_FLOAT:
	//    HEX_SEQUENCE? '.' HEX_SEQUENCE (BIN_EXPONENT SIGN DEC_SEQUENCE)? (LONG | FLOAT_SUFFIX)?;
	public TerminalRule getHEX_FLOATRule() {
		return tHEX_FLOAT;
	}
	
	//terminal fragment DEC_SEQUENCE:
	//    ('0'..'9')+;
	public TerminalRule getDEC_SEQUENCERule() {
		return tDEC_SEQUENCE;
	}
	
	//terminal fragment HEX_SEQUENCE:
	//    ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEX_SEQUENCERule() {
		return tHEX_SEQUENCE;
	}
	
	//terminal fragment BIN_EXPONENT:
	//    ('p' | 'P');
	public TerminalRule getBIN_EXPONENTRule() {
		return tBIN_EXPONENT;
	}
	
	//terminal fragment EXPONENT:
	//    'e' | 'E';
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal fragment SIGN:
	//    '+' | '-';
	public TerminalRule getSIGNRule() {
		return tSIGN;
	}
	
	//terminal fragment DECIMAL:
	//    "0" | ('1'..'9') ('0'..'9')*;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal fragment OCTAL:
	//    '0' ('0'..'7')+;
	public TerminalRule getOCTALRule() {
		return tOCTAL;
	}
	
	//terminal fragment HEX:
	//    HEX_PREFIX HEX_SEQUENCE;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal fragment HEX_PREFIX:
	//    '0' ('x' | 'X');
	public TerminalRule getHEX_PREFIXRule() {
		return tHEX_PREFIX;
	}
	
	//terminal fragment LONG:
	//    "L" | "l";
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal fragment FLOAT_SUFFIX:
	//    "F" | "f";
	public TerminalRule getFLOAT_SUFFIXRule() {
		return tFLOAT_SUFFIX;
	}
	
	//terminal fragment UNSIGNED:
	//    "U" | "u";
	public TerminalRule getUNSIGNEDRule() {
		return tUNSIGNED;
	}
	
	//terminal BOOL_LITERAL returns ecore::EBooleanObject:
	//    "true" | "false";
	public TerminalRule getBOOL_LITERALRule() {
		return tBOOL_LITERAL;
	}
	
	//@Override
	//terminal ID:
	//    ('^')?('a'..'z'|'A'..'Z'|'‡'..'ˇ'|'¿'..'ﬂ'|'_')
	//    ('a'..'z'|'A'..'Z'|'‡'..'ˇ'|'¿'..'ﬂ'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
