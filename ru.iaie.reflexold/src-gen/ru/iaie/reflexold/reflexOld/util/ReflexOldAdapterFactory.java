/**
 * generated by Xtext 2.25.0
 */
package ru.iaie.reflexold.reflexOld.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import ru.iaie.reflexold.reflexOld.AdditiveExpression;
import ru.iaie.reflexold.reflexOld.AssignmentExpression;
import ru.iaie.reflexold.reflexOld.BitAndExpression;
import ru.iaie.reflexold.reflexOld.BitOrExpression;
import ru.iaie.reflexold.reflexOld.BitXorExpression;
import ru.iaie.reflexold.reflexOld.CaseStat;
import ru.iaie.reflexold.reflexOld.CastExpression;
import ru.iaie.reflexold.reflexOld.CheckStateExpression;
import ru.iaie.reflexold.reflexOld.ClockDefinition;
import ru.iaie.reflexold.reflexOld.CompareExpression;
import ru.iaie.reflexold.reflexOld.CompoundStatement;
import ru.iaie.reflexold.reflexOld.Const;
import ru.iaie.reflexold.reflexOld.DefaultStat;
import ru.iaie.reflexold.reflexOld.EnumMember;
import ru.iaie.reflexold.reflexOld.EqualityExpression;
import ru.iaie.reflexold.reflexOld.ErrorStat;
import ru.iaie.reflexold.reflexOld.Expression;
import ru.iaie.reflexold.reflexOld.Function;
import ru.iaie.reflexold.reflexOld.FunctionCall;
import ru.iaie.reflexold.reflexOld.IdReference;
import ru.iaie.reflexold.reflexOld.IfElseStat;
import ru.iaie.reflexold.reflexOld.ImportedVariableList;
import ru.iaie.reflexold.reflexOld.InfixOp;
import ru.iaie.reflexold.reflexOld.LogicalAndExpression;
import ru.iaie.reflexold.reflexOld.LogicalOrExpression;
import ru.iaie.reflexold.reflexOld.LoopStat;
import ru.iaie.reflexold.reflexOld.MultiplicativeExpression;
import ru.iaie.reflexold.reflexOld.PhysicalVariable;
import ru.iaie.reflexold.reflexOld.Port;
import ru.iaie.reflexold.reflexOld.PortMapping;
import ru.iaie.reflexold.reflexOld.PostfixOp;
import ru.iaie.reflexold.reflexOld.PrimaryExpression;
import ru.iaie.reflexold.reflexOld.ProcessVariable;
import ru.iaie.reflexold.reflexOld.Program;
import ru.iaie.reflexold.reflexOld.ProgramVariable;
import ru.iaie.reflexold.reflexOld.ReflexOldPackage;
import ru.iaie.reflexold.reflexOld.ResetStat;
import ru.iaie.reflexold.reflexOld.RestartStat;
import ru.iaie.reflexold.reflexOld.SetStateStat;
import ru.iaie.reflexold.reflexOld.ShiftExpression;
import ru.iaie.reflexold.reflexOld.StartProcStat;
import ru.iaie.reflexold.reflexOld.State;
import ru.iaie.reflexold.reflexOld.Statement;
import ru.iaie.reflexold.reflexOld.StatementSequence;
import ru.iaie.reflexold.reflexOld.StopProcStat;
import ru.iaie.reflexold.reflexOld.SwitchOptionStatSequence;
import ru.iaie.reflexold.reflexOld.SwitchStat;
import ru.iaie.reflexold.reflexOld.TimeAmountOrRef;
import ru.iaie.reflexold.reflexOld.TimeoutFunction;
import ru.iaie.reflexold.reflexOld.UnaryExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ru.iaie.reflexold.reflexOld.ReflexOldPackage
 * @generated
 */
public class ReflexOldAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ReflexOldPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReflexOldAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ReflexOldPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReflexOldSwitch<Adapter> modelSwitch =
    new ReflexOldSwitch<Adapter>()
    {
      @Override
      public Adapter caseProgram(Program object)
      {
        return createProgramAdapter();
      }
      @Override
      public Adapter caseClockDefinition(ClockDefinition object)
      {
        return createClockDefinitionAdapter();
      }
      @Override
      public Adapter caseProcess(ru.iaie.reflexold.reflexOld.Process object)
      {
        return createProcessAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseImportedVariableList(ImportedVariableList object)
      {
        return createImportedVariableListAdapter();
      }
      @Override
      public Adapter caseProcessVariable(ProcessVariable object)
      {
        return createProcessVariableAdapter();
      }
      @Override
      public Adapter casePhysicalVariable(PhysicalVariable object)
      {
        return createPhysicalVariableAdapter();
      }
      @Override
      public Adapter casePortMapping(PortMapping object)
      {
        return createPortMappingAdapter();
      }
      @Override
      public Adapter casePort(Port object)
      {
        return createPortAdapter();
      }
      @Override
      public Adapter caseProgramVariable(ProgramVariable object)
      {
        return createProgramVariableAdapter();
      }
      @Override
      public Adapter caseTimeoutFunction(TimeoutFunction object)
      {
        return createTimeoutFunctionAdapter();
      }
      @Override
      public Adapter caseTimeAmountOrRef(TimeAmountOrRef object)
      {
        return createTimeAmountOrRefAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseConst(Const object)
      {
        return createConstAdapter();
      }
      @Override
      public Adapter caseEnum(ru.iaie.reflexold.reflexOld.Enum object)
      {
        return createEnumAdapter();
      }
      @Override
      public Adapter caseEnumMember(EnumMember object)
      {
        return createEnumMemberAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseStatementSequence(StatementSequence object)
      {
        return createStatementSequenceAdapter();
      }
      @Override
      public Adapter caseCompoundStatement(CompoundStatement object)
      {
        return createCompoundStatementAdapter();
      }
      @Override
      public Adapter caseIfElseStat(IfElseStat object)
      {
        return createIfElseStatAdapter();
      }
      @Override
      public Adapter caseSwitchStat(SwitchStat object)
      {
        return createSwitchStatAdapter();
      }
      @Override
      public Adapter caseCaseStat(CaseStat object)
      {
        return createCaseStatAdapter();
      }
      @Override
      public Adapter caseDefaultStat(DefaultStat object)
      {
        return createDefaultStatAdapter();
      }
      @Override
      public Adapter caseSwitchOptionStatSequence(SwitchOptionStatSequence object)
      {
        return createSwitchOptionStatSequenceAdapter();
      }
      @Override
      public Adapter caseStartProcStat(StartProcStat object)
      {
        return createStartProcStatAdapter();
      }
      @Override
      public Adapter caseStopProcStat(StopProcStat object)
      {
        return createStopProcStatAdapter();
      }
      @Override
      public Adapter caseErrorStat(ErrorStat object)
      {
        return createErrorStatAdapter();
      }
      @Override
      public Adapter caseRestartStat(RestartStat object)
      {
        return createRestartStatAdapter();
      }
      @Override
      public Adapter caseResetStat(ResetStat object)
      {
        return createResetStatAdapter();
      }
      @Override
      public Adapter caseLoopStat(LoopStat object)
      {
        return createLoopStatAdapter();
      }
      @Override
      public Adapter caseSetStateStat(SetStateStat object)
      {
        return createSetStateStatAdapter();
      }
      @Override
      public Adapter caseIdReference(IdReference object)
      {
        return createIdReferenceAdapter();
      }
      @Override
      public Adapter caseInfixOp(InfixOp object)
      {
        return createInfixOpAdapter();
      }
      @Override
      public Adapter casePostfixOp(PostfixOp object)
      {
        return createPostfixOpAdapter();
      }
      @Override
      public Adapter caseFunctionCall(FunctionCall object)
      {
        return createFunctionCallAdapter();
      }
      @Override
      public Adapter caseCheckStateExpression(CheckStateExpression object)
      {
        return createCheckStateExpressionAdapter();
      }
      @Override
      public Adapter casePrimaryExpression(PrimaryExpression object)
      {
        return createPrimaryExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryExpression(UnaryExpression object)
      {
        return createUnaryExpressionAdapter();
      }
      @Override
      public Adapter caseCastExpression(CastExpression object)
      {
        return createCastExpressionAdapter();
      }
      @Override
      public Adapter caseMultiplicativeExpression(MultiplicativeExpression object)
      {
        return createMultiplicativeExpressionAdapter();
      }
      @Override
      public Adapter caseAdditiveExpression(AdditiveExpression object)
      {
        return createAdditiveExpressionAdapter();
      }
      @Override
      public Adapter caseShiftExpression(ShiftExpression object)
      {
        return createShiftExpressionAdapter();
      }
      @Override
      public Adapter caseCompareExpression(CompareExpression object)
      {
        return createCompareExpressionAdapter();
      }
      @Override
      public Adapter caseEqualityExpression(EqualityExpression object)
      {
        return createEqualityExpressionAdapter();
      }
      @Override
      public Adapter caseBitAndExpression(BitAndExpression object)
      {
        return createBitAndExpressionAdapter();
      }
      @Override
      public Adapter caseBitXorExpression(BitXorExpression object)
      {
        return createBitXorExpressionAdapter();
      }
      @Override
      public Adapter caseBitOrExpression(BitOrExpression object)
      {
        return createBitOrExpressionAdapter();
      }
      @Override
      public Adapter caseLogicalAndExpression(LogicalAndExpression object)
      {
        return createLogicalAndExpressionAdapter();
      }
      @Override
      public Adapter caseLogicalOrExpression(LogicalOrExpression object)
      {
        return createLogicalOrExpressionAdapter();
      }
      @Override
      public Adapter caseAssignmentExpression(AssignmentExpression object)
      {
        return createAssignmentExpressionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.Program
   * @generated
   */
  public Adapter createProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.ClockDefinition <em>Clock Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.ClockDefinition
   * @generated
   */
  public Adapter createClockDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.Process <em>Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.Process
   * @generated
   */
  public Adapter createProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.ImportedVariableList <em>Imported Variable List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.ImportedVariableList
   * @generated
   */
  public Adapter createImportedVariableListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.ProcessVariable <em>Process Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.ProcessVariable
   * @generated
   */
  public Adapter createProcessVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.PhysicalVariable <em>Physical Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.PhysicalVariable
   * @generated
   */
  public Adapter createPhysicalVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.PortMapping <em>Port Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.PortMapping
   * @generated
   */
  public Adapter createPortMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.Port <em>Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.Port
   * @generated
   */
  public Adapter createPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.ProgramVariable <em>Program Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.ProgramVariable
   * @generated
   */
  public Adapter createProgramVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.TimeoutFunction <em>Timeout Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.TimeoutFunction
   * @generated
   */
  public Adapter createTimeoutFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.TimeAmountOrRef <em>Time Amount Or Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.TimeAmountOrRef
   * @generated
   */
  public Adapter createTimeAmountOrRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.Const <em>Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.Const
   * @generated
   */
  public Adapter createConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.Enum <em>Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.Enum
   * @generated
   */
  public Adapter createEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.EnumMember <em>Enum Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.EnumMember
   * @generated
   */
  public Adapter createEnumMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.StatementSequence <em>Statement Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.StatementSequence
   * @generated
   */
  public Adapter createStatementSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.CompoundStatement <em>Compound Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.CompoundStatement
   * @generated
   */
  public Adapter createCompoundStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.IfElseStat <em>If Else Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.IfElseStat
   * @generated
   */
  public Adapter createIfElseStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.SwitchStat <em>Switch Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.SwitchStat
   * @generated
   */
  public Adapter createSwitchStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.CaseStat <em>Case Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.CaseStat
   * @generated
   */
  public Adapter createCaseStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.DefaultStat <em>Default Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.DefaultStat
   * @generated
   */
  public Adapter createDefaultStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.SwitchOptionStatSequence <em>Switch Option Stat Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.SwitchOptionStatSequence
   * @generated
   */
  public Adapter createSwitchOptionStatSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.StartProcStat <em>Start Proc Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.StartProcStat
   * @generated
   */
  public Adapter createStartProcStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.StopProcStat <em>Stop Proc Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.StopProcStat
   * @generated
   */
  public Adapter createStopProcStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.ErrorStat <em>Error Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.ErrorStat
   * @generated
   */
  public Adapter createErrorStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.RestartStat <em>Restart Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.RestartStat
   * @generated
   */
  public Adapter createRestartStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.ResetStat <em>Reset Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.ResetStat
   * @generated
   */
  public Adapter createResetStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.LoopStat <em>Loop Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.LoopStat
   * @generated
   */
  public Adapter createLoopStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.SetStateStat <em>Set State Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.SetStateStat
   * @generated
   */
  public Adapter createSetStateStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.IdReference <em>Id Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.IdReference
   * @generated
   */
  public Adapter createIdReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.InfixOp <em>Infix Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.InfixOp
   * @generated
   */
  public Adapter createInfixOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.PostfixOp <em>Postfix Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.PostfixOp
   * @generated
   */
  public Adapter createPostfixOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.FunctionCall <em>Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.FunctionCall
   * @generated
   */
  public Adapter createFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.CheckStateExpression <em>Check State Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.CheckStateExpression
   * @generated
   */
  public Adapter createCheckStateExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.PrimaryExpression <em>Primary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.PrimaryExpression
   * @generated
   */
  public Adapter createPrimaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.UnaryExpression <em>Unary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.UnaryExpression
   * @generated
   */
  public Adapter createUnaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.CastExpression <em>Cast Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.CastExpression
   * @generated
   */
  public Adapter createCastExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.MultiplicativeExpression <em>Multiplicative Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.MultiplicativeExpression
   * @generated
   */
  public Adapter createMultiplicativeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.AdditiveExpression <em>Additive Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.AdditiveExpression
   * @generated
   */
  public Adapter createAdditiveExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.ShiftExpression <em>Shift Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.ShiftExpression
   * @generated
   */
  public Adapter createShiftExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.CompareExpression <em>Compare Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.CompareExpression
   * @generated
   */
  public Adapter createCompareExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.EqualityExpression <em>Equality Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.EqualityExpression
   * @generated
   */
  public Adapter createEqualityExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.BitAndExpression <em>Bit And Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.BitAndExpression
   * @generated
   */
  public Adapter createBitAndExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.BitXorExpression <em>Bit Xor Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.BitXorExpression
   * @generated
   */
  public Adapter createBitXorExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.BitOrExpression <em>Bit Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.BitOrExpression
   * @generated
   */
  public Adapter createBitOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.LogicalAndExpression <em>Logical And Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.LogicalAndExpression
   * @generated
   */
  public Adapter createLogicalAndExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.LogicalOrExpression <em>Logical Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.LogicalOrExpression
   * @generated
   */
  public Adapter createLogicalOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.AssignmentExpression <em>Assignment Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.AssignmentExpression
   * @generated
   */
  public Adapter createAssignmentExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ru.iaie.reflexold.reflexOld.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ru.iaie.reflexold.reflexOld.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ReflexOldAdapterFactory
