/**
 * generated by Xtext 2.25.0
 */
package ru.iaie.reflexold.reflexOld.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import ru.iaie.reflexold.reflexOld.AdditiveExpression;
import ru.iaie.reflexold.reflexOld.AssignmentExpression;
import ru.iaie.reflexold.reflexOld.BitAndExpression;
import ru.iaie.reflexold.reflexOld.BitOrExpression;
import ru.iaie.reflexold.reflexOld.BitXorExpression;
import ru.iaie.reflexold.reflexOld.CaseStat;
import ru.iaie.reflexold.reflexOld.CastExpression;
import ru.iaie.reflexold.reflexOld.CheckStateExpression;
import ru.iaie.reflexold.reflexOld.ClockDefinition;
import ru.iaie.reflexold.reflexOld.CompareExpression;
import ru.iaie.reflexold.reflexOld.CompoundStatement;
import ru.iaie.reflexold.reflexOld.Const;
import ru.iaie.reflexold.reflexOld.DefaultStat;
import ru.iaie.reflexold.reflexOld.EnumMember;
import ru.iaie.reflexold.reflexOld.EqualityExpression;
import ru.iaie.reflexold.reflexOld.ErrorStat;
import ru.iaie.reflexold.reflexOld.Expression;
import ru.iaie.reflexold.reflexOld.Function;
import ru.iaie.reflexold.reflexOld.FunctionCall;
import ru.iaie.reflexold.reflexOld.IdReference;
import ru.iaie.reflexold.reflexOld.IfElseStat;
import ru.iaie.reflexold.reflexOld.ImportedVariableList;
import ru.iaie.reflexold.reflexOld.InfixOp;
import ru.iaie.reflexold.reflexOld.LogicalAndExpression;
import ru.iaie.reflexold.reflexOld.LogicalOrExpression;
import ru.iaie.reflexold.reflexOld.LoopStat;
import ru.iaie.reflexold.reflexOld.MultiplicativeExpression;
import ru.iaie.reflexold.reflexOld.PhysicalVariable;
import ru.iaie.reflexold.reflexOld.Port;
import ru.iaie.reflexold.reflexOld.PortMapping;
import ru.iaie.reflexold.reflexOld.PostfixOp;
import ru.iaie.reflexold.reflexOld.PrimaryExpression;
import ru.iaie.reflexold.reflexOld.ProcessVariable;
import ru.iaie.reflexold.reflexOld.Program;
import ru.iaie.reflexold.reflexOld.ProgramVariable;
import ru.iaie.reflexold.reflexOld.ReflexOldPackage;
import ru.iaie.reflexold.reflexOld.ResetStat;
import ru.iaie.reflexold.reflexOld.RestartStat;
import ru.iaie.reflexold.reflexOld.SetStateStat;
import ru.iaie.reflexold.reflexOld.ShiftExpression;
import ru.iaie.reflexold.reflexOld.StartProcStat;
import ru.iaie.reflexold.reflexOld.State;
import ru.iaie.reflexold.reflexOld.Statement;
import ru.iaie.reflexold.reflexOld.StatementSequence;
import ru.iaie.reflexold.reflexOld.StopProcStat;
import ru.iaie.reflexold.reflexOld.SwitchOptionStatSequence;
import ru.iaie.reflexold.reflexOld.SwitchStat;
import ru.iaie.reflexold.reflexOld.TimeAmountOrRef;
import ru.iaie.reflexold.reflexOld.TimeoutFunction;
import ru.iaie.reflexold.reflexOld.UnaryExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see ru.iaie.reflexold.reflexOld.ReflexOldPackage
 * @generated
 */
public class ReflexOldSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ReflexOldPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReflexOldSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ReflexOldPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ReflexOldPackage.PROGRAM:
      {
        Program program = (Program)theEObject;
        T result = caseProgram(program);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.CLOCK_DEFINITION:
      {
        ClockDefinition clockDefinition = (ClockDefinition)theEObject;
        T result = caseClockDefinition(clockDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.PROCESS:
      {
        ru.iaie.reflexold.reflexOld.Process process = (ru.iaie.reflexold.reflexOld.Process)theEObject;
        T result = caseProcess(process);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.STATE:
      {
        State state = (State)theEObject;
        T result = caseState(state);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.IMPORTED_VARIABLE_LIST:
      {
        ImportedVariableList importedVariableList = (ImportedVariableList)theEObject;
        T result = caseImportedVariableList(importedVariableList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.PROCESS_VARIABLE:
      {
        ProcessVariable processVariable = (ProcessVariable)theEObject;
        T result = caseProcessVariable(processVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.PHYSICAL_VARIABLE:
      {
        PhysicalVariable physicalVariable = (PhysicalVariable)theEObject;
        T result = casePhysicalVariable(physicalVariable);
        if (result == null) result = caseProcessVariable(physicalVariable);
        if (result == null) result = caseIdReference(physicalVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.PORT_MAPPING:
      {
        PortMapping portMapping = (PortMapping)theEObject;
        T result = casePortMapping(portMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.PORT:
      {
        Port port = (Port)theEObject;
        T result = casePort(port);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.PROGRAM_VARIABLE:
      {
        ProgramVariable programVariable = (ProgramVariable)theEObject;
        T result = caseProgramVariable(programVariable);
        if (result == null) result = caseProcessVariable(programVariable);
        if (result == null) result = caseIdReference(programVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.TIMEOUT_FUNCTION:
      {
        TimeoutFunction timeoutFunction = (TimeoutFunction)theEObject;
        T result = caseTimeoutFunction(timeoutFunction);
        if (result == null) result = caseTimeAmountOrRef(timeoutFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.TIME_AMOUNT_OR_REF:
      {
        TimeAmountOrRef timeAmountOrRef = (TimeAmountOrRef)theEObject;
        T result = caseTimeAmountOrRef(timeAmountOrRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.FUNCTION:
      {
        Function function = (Function)theEObject;
        T result = caseFunction(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.CONST:
      {
        Const const_ = (Const)theEObject;
        T result = caseConst(const_);
        if (result == null) result = caseIdReference(const_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.ENUM:
      {
        ru.iaie.reflexold.reflexOld.Enum enum_ = (ru.iaie.reflexold.reflexOld.Enum)theEObject;
        T result = caseEnum(enum_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.ENUM_MEMBER:
      {
        EnumMember enumMember = (EnumMember)theEObject;
        T result = caseEnumMember(enumMember);
        if (result == null) result = caseIdReference(enumMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.STATEMENT_SEQUENCE:
      {
        StatementSequence statementSequence = (StatementSequence)theEObject;
        T result = caseStatementSequence(statementSequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.COMPOUND_STATEMENT:
      {
        CompoundStatement compoundStatement = (CompoundStatement)theEObject;
        T result = caseCompoundStatement(compoundStatement);
        if (result == null) result = caseStatement(compoundStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.IF_ELSE_STAT:
      {
        IfElseStat ifElseStat = (IfElseStat)theEObject;
        T result = caseIfElseStat(ifElseStat);
        if (result == null) result = caseStatement(ifElseStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.SWITCH_STAT:
      {
        SwitchStat switchStat = (SwitchStat)theEObject;
        T result = caseSwitchStat(switchStat);
        if (result == null) result = caseStatement(switchStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.CASE_STAT:
      {
        CaseStat caseStat = (CaseStat)theEObject;
        T result = caseCaseStat(caseStat);
        if (result == null) result = caseSwitchOptionStatSequence(caseStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.DEFAULT_STAT:
      {
        DefaultStat defaultStat = (DefaultStat)theEObject;
        T result = caseDefaultStat(defaultStat);
        if (result == null) result = caseSwitchOptionStatSequence(defaultStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.SWITCH_OPTION_STAT_SEQUENCE:
      {
        SwitchOptionStatSequence switchOptionStatSequence = (SwitchOptionStatSequence)theEObject;
        T result = caseSwitchOptionStatSequence(switchOptionStatSequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.START_PROC_STAT:
      {
        StartProcStat startProcStat = (StartProcStat)theEObject;
        T result = caseStartProcStat(startProcStat);
        if (result == null) result = caseStatement(startProcStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.STOP_PROC_STAT:
      {
        StopProcStat stopProcStat = (StopProcStat)theEObject;
        T result = caseStopProcStat(stopProcStat);
        if (result == null) result = caseStatement(stopProcStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.ERROR_STAT:
      {
        ErrorStat errorStat = (ErrorStat)theEObject;
        T result = caseErrorStat(errorStat);
        if (result == null) result = caseStatement(errorStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.RESTART_STAT:
      {
        RestartStat restartStat = (RestartStat)theEObject;
        T result = caseRestartStat(restartStat);
        if (result == null) result = caseStatement(restartStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.RESET_STAT:
      {
        ResetStat resetStat = (ResetStat)theEObject;
        T result = caseResetStat(resetStat);
        if (result == null) result = caseStatement(resetStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.LOOP_STAT:
      {
        LoopStat loopStat = (LoopStat)theEObject;
        T result = caseLoopStat(loopStat);
        if (result == null) result = caseStatement(loopStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.SET_STATE_STAT:
      {
        SetStateStat setStateStat = (SetStateStat)theEObject;
        T result = caseSetStateStat(setStateStat);
        if (result == null) result = caseStatement(setStateStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.ID_REFERENCE:
      {
        IdReference idReference = (IdReference)theEObject;
        T result = caseIdReference(idReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.INFIX_OP:
      {
        InfixOp infixOp = (InfixOp)theEObject;
        T result = caseInfixOp(infixOp);
        if (result == null) result = caseUnaryExpression(infixOp);
        if (result == null) result = caseCastExpression(infixOp);
        if (result == null) result = caseMultiplicativeExpression(infixOp);
        if (result == null) result = caseAdditiveExpression(infixOp);
        if (result == null) result = caseShiftExpression(infixOp);
        if (result == null) result = caseCompareExpression(infixOp);
        if (result == null) result = caseEqualityExpression(infixOp);
        if (result == null) result = caseBitAndExpression(infixOp);
        if (result == null) result = caseBitXorExpression(infixOp);
        if (result == null) result = caseBitOrExpression(infixOp);
        if (result == null) result = caseLogicalAndExpression(infixOp);
        if (result == null) result = caseLogicalOrExpression(infixOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.POSTFIX_OP:
      {
        PostfixOp postfixOp = (PostfixOp)theEObject;
        T result = casePostfixOp(postfixOp);
        if (result == null) result = caseUnaryExpression(postfixOp);
        if (result == null) result = caseCastExpression(postfixOp);
        if (result == null) result = caseMultiplicativeExpression(postfixOp);
        if (result == null) result = caseAdditiveExpression(postfixOp);
        if (result == null) result = caseShiftExpression(postfixOp);
        if (result == null) result = caseCompareExpression(postfixOp);
        if (result == null) result = caseEqualityExpression(postfixOp);
        if (result == null) result = caseBitAndExpression(postfixOp);
        if (result == null) result = caseBitXorExpression(postfixOp);
        if (result == null) result = caseBitOrExpression(postfixOp);
        if (result == null) result = caseLogicalAndExpression(postfixOp);
        if (result == null) result = caseLogicalOrExpression(postfixOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.FUNCTION_CALL:
      {
        FunctionCall functionCall = (FunctionCall)theEObject;
        T result = caseFunctionCall(functionCall);
        if (result == null) result = caseUnaryExpression(functionCall);
        if (result == null) result = caseCastExpression(functionCall);
        if (result == null) result = caseMultiplicativeExpression(functionCall);
        if (result == null) result = caseAdditiveExpression(functionCall);
        if (result == null) result = caseShiftExpression(functionCall);
        if (result == null) result = caseCompareExpression(functionCall);
        if (result == null) result = caseEqualityExpression(functionCall);
        if (result == null) result = caseBitAndExpression(functionCall);
        if (result == null) result = caseBitXorExpression(functionCall);
        if (result == null) result = caseBitOrExpression(functionCall);
        if (result == null) result = caseLogicalAndExpression(functionCall);
        if (result == null) result = caseLogicalOrExpression(functionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.CHECK_STATE_EXPRESSION:
      {
        CheckStateExpression checkStateExpression = (CheckStateExpression)theEObject;
        T result = caseCheckStateExpression(checkStateExpression);
        if (result == null) result = caseCompareExpression(checkStateExpression);
        if (result == null) result = caseEqualityExpression(checkStateExpression);
        if (result == null) result = caseBitAndExpression(checkStateExpression);
        if (result == null) result = caseBitXorExpression(checkStateExpression);
        if (result == null) result = caseBitOrExpression(checkStateExpression);
        if (result == null) result = caseLogicalAndExpression(checkStateExpression);
        if (result == null) result = caseLogicalOrExpression(checkStateExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.PRIMARY_EXPRESSION:
      {
        PrimaryExpression primaryExpression = (PrimaryExpression)theEObject;
        T result = casePrimaryExpression(primaryExpression);
        if (result == null) result = caseUnaryExpression(primaryExpression);
        if (result == null) result = caseCastExpression(primaryExpression);
        if (result == null) result = caseMultiplicativeExpression(primaryExpression);
        if (result == null) result = caseAdditiveExpression(primaryExpression);
        if (result == null) result = caseShiftExpression(primaryExpression);
        if (result == null) result = caseCompareExpression(primaryExpression);
        if (result == null) result = caseEqualityExpression(primaryExpression);
        if (result == null) result = caseBitAndExpression(primaryExpression);
        if (result == null) result = caseBitXorExpression(primaryExpression);
        if (result == null) result = caseBitOrExpression(primaryExpression);
        if (result == null) result = caseLogicalAndExpression(primaryExpression);
        if (result == null) result = caseLogicalOrExpression(primaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.UNARY_EXPRESSION:
      {
        UnaryExpression unaryExpression = (UnaryExpression)theEObject;
        T result = caseUnaryExpression(unaryExpression);
        if (result == null) result = caseCastExpression(unaryExpression);
        if (result == null) result = caseMultiplicativeExpression(unaryExpression);
        if (result == null) result = caseAdditiveExpression(unaryExpression);
        if (result == null) result = caseShiftExpression(unaryExpression);
        if (result == null) result = caseCompareExpression(unaryExpression);
        if (result == null) result = caseEqualityExpression(unaryExpression);
        if (result == null) result = caseBitAndExpression(unaryExpression);
        if (result == null) result = caseBitXorExpression(unaryExpression);
        if (result == null) result = caseBitOrExpression(unaryExpression);
        if (result == null) result = caseLogicalAndExpression(unaryExpression);
        if (result == null) result = caseLogicalOrExpression(unaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.CAST_EXPRESSION:
      {
        CastExpression castExpression = (CastExpression)theEObject;
        T result = caseCastExpression(castExpression);
        if (result == null) result = caseMultiplicativeExpression(castExpression);
        if (result == null) result = caseAdditiveExpression(castExpression);
        if (result == null) result = caseShiftExpression(castExpression);
        if (result == null) result = caseCompareExpression(castExpression);
        if (result == null) result = caseEqualityExpression(castExpression);
        if (result == null) result = caseBitAndExpression(castExpression);
        if (result == null) result = caseBitXorExpression(castExpression);
        if (result == null) result = caseBitOrExpression(castExpression);
        if (result == null) result = caseLogicalAndExpression(castExpression);
        if (result == null) result = caseLogicalOrExpression(castExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.MULTIPLICATIVE_EXPRESSION:
      {
        MultiplicativeExpression multiplicativeExpression = (MultiplicativeExpression)theEObject;
        T result = caseMultiplicativeExpression(multiplicativeExpression);
        if (result == null) result = caseAdditiveExpression(multiplicativeExpression);
        if (result == null) result = caseShiftExpression(multiplicativeExpression);
        if (result == null) result = caseCompareExpression(multiplicativeExpression);
        if (result == null) result = caseEqualityExpression(multiplicativeExpression);
        if (result == null) result = caseBitAndExpression(multiplicativeExpression);
        if (result == null) result = caseBitXorExpression(multiplicativeExpression);
        if (result == null) result = caseBitOrExpression(multiplicativeExpression);
        if (result == null) result = caseLogicalAndExpression(multiplicativeExpression);
        if (result == null) result = caseLogicalOrExpression(multiplicativeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.ADDITIVE_EXPRESSION:
      {
        AdditiveExpression additiveExpression = (AdditiveExpression)theEObject;
        T result = caseAdditiveExpression(additiveExpression);
        if (result == null) result = caseShiftExpression(additiveExpression);
        if (result == null) result = caseCompareExpression(additiveExpression);
        if (result == null) result = caseEqualityExpression(additiveExpression);
        if (result == null) result = caseBitAndExpression(additiveExpression);
        if (result == null) result = caseBitXorExpression(additiveExpression);
        if (result == null) result = caseBitOrExpression(additiveExpression);
        if (result == null) result = caseLogicalAndExpression(additiveExpression);
        if (result == null) result = caseLogicalOrExpression(additiveExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.SHIFT_EXPRESSION:
      {
        ShiftExpression shiftExpression = (ShiftExpression)theEObject;
        T result = caseShiftExpression(shiftExpression);
        if (result == null) result = caseCompareExpression(shiftExpression);
        if (result == null) result = caseEqualityExpression(shiftExpression);
        if (result == null) result = caseBitAndExpression(shiftExpression);
        if (result == null) result = caseBitXorExpression(shiftExpression);
        if (result == null) result = caseBitOrExpression(shiftExpression);
        if (result == null) result = caseLogicalAndExpression(shiftExpression);
        if (result == null) result = caseLogicalOrExpression(shiftExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.COMPARE_EXPRESSION:
      {
        CompareExpression compareExpression = (CompareExpression)theEObject;
        T result = caseCompareExpression(compareExpression);
        if (result == null) result = caseEqualityExpression(compareExpression);
        if (result == null) result = caseBitAndExpression(compareExpression);
        if (result == null) result = caseBitXorExpression(compareExpression);
        if (result == null) result = caseBitOrExpression(compareExpression);
        if (result == null) result = caseLogicalAndExpression(compareExpression);
        if (result == null) result = caseLogicalOrExpression(compareExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.EQUALITY_EXPRESSION:
      {
        EqualityExpression equalityExpression = (EqualityExpression)theEObject;
        T result = caseEqualityExpression(equalityExpression);
        if (result == null) result = caseBitAndExpression(equalityExpression);
        if (result == null) result = caseBitXorExpression(equalityExpression);
        if (result == null) result = caseBitOrExpression(equalityExpression);
        if (result == null) result = caseLogicalAndExpression(equalityExpression);
        if (result == null) result = caseLogicalOrExpression(equalityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.BIT_AND_EXPRESSION:
      {
        BitAndExpression bitAndExpression = (BitAndExpression)theEObject;
        T result = caseBitAndExpression(bitAndExpression);
        if (result == null) result = caseBitXorExpression(bitAndExpression);
        if (result == null) result = caseBitOrExpression(bitAndExpression);
        if (result == null) result = caseLogicalAndExpression(bitAndExpression);
        if (result == null) result = caseLogicalOrExpression(bitAndExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.BIT_XOR_EXPRESSION:
      {
        BitXorExpression bitXorExpression = (BitXorExpression)theEObject;
        T result = caseBitXorExpression(bitXorExpression);
        if (result == null) result = caseBitOrExpression(bitXorExpression);
        if (result == null) result = caseLogicalAndExpression(bitXorExpression);
        if (result == null) result = caseLogicalOrExpression(bitXorExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.BIT_OR_EXPRESSION:
      {
        BitOrExpression bitOrExpression = (BitOrExpression)theEObject;
        T result = caseBitOrExpression(bitOrExpression);
        if (result == null) result = caseLogicalAndExpression(bitOrExpression);
        if (result == null) result = caseLogicalOrExpression(bitOrExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.LOGICAL_AND_EXPRESSION:
      {
        LogicalAndExpression logicalAndExpression = (LogicalAndExpression)theEObject;
        T result = caseLogicalAndExpression(logicalAndExpression);
        if (result == null) result = caseLogicalOrExpression(logicalAndExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.LOGICAL_OR_EXPRESSION:
      {
        LogicalOrExpression logicalOrExpression = (LogicalOrExpression)theEObject;
        T result = caseLogicalOrExpression(logicalOrExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.ASSIGNMENT_EXPRESSION:
      {
        AssignmentExpression assignmentExpression = (AssignmentExpression)theEObject;
        T result = caseAssignmentExpression(assignmentExpression);
        if (result == null) result = caseExpression(assignmentExpression);
        if (result == null) result = caseStatement(assignmentExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReflexOldPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseStatement(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProgram(Program object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clock Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clock Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClockDefinition(ClockDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcess(ru.iaie.reflexold.reflexOld.Process object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseState(State object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Imported Variable List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Imported Variable List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportedVariableList(ImportedVariableList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessVariable(ProcessVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalVariable(PhysicalVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePortMapping(PortMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePort(Port object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Program Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Program Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProgramVariable(ProgramVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timeout Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timeout Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeoutFunction(TimeoutFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time Amount Or Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time Amount Or Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeAmountOrRef(TimeAmountOrRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction(Function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConst(Const object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnum(ru.iaie.reflexold.reflexOld.Enum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumMember(EnumMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementSequence(StatementSequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compound Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compound Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompoundStatement(CompoundStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Else Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Else Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfElseStat(IfElseStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Switch Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Switch Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSwitchStat(SwitchStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseStat(CaseStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Default Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Default Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefaultStat(DefaultStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Switch Option Stat Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Switch Option Stat Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSwitchOptionStatSequence(SwitchOptionStatSequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Start Proc Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Start Proc Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStartProcStat(StartProcStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stop Proc Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stop Proc Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStopProcStat(StopProcStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Error Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Error Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseErrorStat(ErrorStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Restart Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Restart Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRestartStat(RestartStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reset Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reset Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResetStat(ResetStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loop Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loop Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoopStat(LoopStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set State Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set State Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetStateStat(SetStateStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Id Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Id Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdReference(IdReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Infix Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Infix Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfixOp(InfixOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postfix Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postfix Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostfixOp(PostfixOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCall(FunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Check State Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Check State Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheckStateExpression(CheckStateExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpression(PrimaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryExpression(UnaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cast Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cast Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCastExpression(CastExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicative Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicative Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicativeExpression(MultiplicativeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Additive Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Additive Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdditiveExpression(AdditiveExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shift Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shift Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShiftExpression(ShiftExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareExpression(CompareExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualityExpression(EqualityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit And Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit And Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitAndExpression(BitAndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit Xor Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit Xor Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitXorExpression(BitXorExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitOrExpression(BitOrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical And Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical And Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalAndExpression(LogicalAndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalOrExpression(LogicalOrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignmentExpression(AssignmentExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ReflexOldSwitch
