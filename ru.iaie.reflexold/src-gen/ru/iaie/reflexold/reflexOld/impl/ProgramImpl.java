/**
 * generated by Xtext 2.25.0
 */
package ru.iaie.reflexold.reflexOld.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import ru.iaie.reflexold.reflexOld.ClockDefinition;
import ru.iaie.reflexold.reflexOld.Const;
import ru.iaie.reflexold.reflexOld.Function;
import ru.iaie.reflexold.reflexOld.Port;
import ru.iaie.reflexold.reflexOld.Program;
import ru.iaie.reflexold.reflexOld.ReflexOldPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.ProgramImpl#isEn <em>En</em>}</li>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.ProgramImpl#getName <em>Name</em>}</li>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.ProgramImpl#getClock <em>Clock</em>}</li>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.ProgramImpl#getConsts <em>Consts</em>}</li>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.ProgramImpl#getEnums <em>Enums</em>}</li>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.ProgramImpl#getFunctions <em>Functions</em>}</li>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.ProgramImpl#getPorts <em>Ports</em>}</li>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.ProgramImpl#getProcesses <em>Processes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProgramImpl extends MinimalEObjectImpl.Container implements Program
{
  /**
   * The default value of the '{@link #isEn() <em>En</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEn()
   * @generated
   * @ordered
   */
  protected static final boolean EN_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEn() <em>En</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEn()
   * @generated
   * @ordered
   */
  protected boolean en = EN_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getClock() <em>Clock</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClock()
   * @generated
   * @ordered
   */
  protected ClockDefinition clock;

  /**
   * The cached value of the '{@link #getConsts() <em>Consts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsts()
   * @generated
   * @ordered
   */
  protected EList<Const> consts;

  /**
   * The cached value of the '{@link #getEnums() <em>Enums</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnums()
   * @generated
   * @ordered
   */
  protected EList<ru.iaie.reflexold.reflexOld.Enum> enums;

  /**
   * The cached value of the '{@link #getFunctions() <em>Functions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctions()
   * @generated
   * @ordered
   */
  protected EList<Function> functions;

  /**
   * The cached value of the '{@link #getPorts() <em>Ports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPorts()
   * @generated
   * @ordered
   */
  protected EList<Port> ports;

  /**
   * The cached value of the '{@link #getProcesses() <em>Processes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcesses()
   * @generated
   * @ordered
   */
  protected EList<ru.iaie.reflexold.reflexOld.Process> processes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReflexOldPackage.Literals.PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEn()
  {
    return en;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEn(boolean newEn)
  {
    boolean oldEn = en;
    en = newEn;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexOldPackage.PROGRAM__EN, oldEn, en));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexOldPackage.PROGRAM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClockDefinition getClock()
  {
    return clock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClock(ClockDefinition newClock, NotificationChain msgs)
  {
    ClockDefinition oldClock = clock;
    clock = newClock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReflexOldPackage.PROGRAM__CLOCK, oldClock, newClock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClock(ClockDefinition newClock)
  {
    if (newClock != clock)
    {
      NotificationChain msgs = null;
      if (clock != null)
        msgs = ((InternalEObject)clock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReflexOldPackage.PROGRAM__CLOCK, null, msgs);
      if (newClock != null)
        msgs = ((InternalEObject)newClock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReflexOldPackage.PROGRAM__CLOCK, null, msgs);
      msgs = basicSetClock(newClock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexOldPackage.PROGRAM__CLOCK, newClock, newClock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Const> getConsts()
  {
    if (consts == null)
    {
      consts = new EObjectContainmentEList<Const>(Const.class, this, ReflexOldPackage.PROGRAM__CONSTS);
    }
    return consts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ru.iaie.reflexold.reflexOld.Enum> getEnums()
  {
    if (enums == null)
    {
      enums = new EObjectContainmentEList<ru.iaie.reflexold.reflexOld.Enum>(ru.iaie.reflexold.reflexOld.Enum.class, this, ReflexOldPackage.PROGRAM__ENUMS);
    }
    return enums;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Function> getFunctions()
  {
    if (functions == null)
    {
      functions = new EObjectContainmentEList<Function>(Function.class, this, ReflexOldPackage.PROGRAM__FUNCTIONS);
    }
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Port> getPorts()
  {
    if (ports == null)
    {
      ports = new EObjectContainmentEList<Port>(Port.class, this, ReflexOldPackage.PROGRAM__PORTS);
    }
    return ports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ru.iaie.reflexold.reflexOld.Process> getProcesses()
  {
    if (processes == null)
    {
      processes = new EObjectContainmentEList<ru.iaie.reflexold.reflexOld.Process>(ru.iaie.reflexold.reflexOld.Process.class, this, ReflexOldPackage.PROGRAM__PROCESSES);
    }
    return processes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReflexOldPackage.PROGRAM__CLOCK:
        return basicSetClock(null, msgs);
      case ReflexOldPackage.PROGRAM__CONSTS:
        return ((InternalEList<?>)getConsts()).basicRemove(otherEnd, msgs);
      case ReflexOldPackage.PROGRAM__ENUMS:
        return ((InternalEList<?>)getEnums()).basicRemove(otherEnd, msgs);
      case ReflexOldPackage.PROGRAM__FUNCTIONS:
        return ((InternalEList<?>)getFunctions()).basicRemove(otherEnd, msgs);
      case ReflexOldPackage.PROGRAM__PORTS:
        return ((InternalEList<?>)getPorts()).basicRemove(otherEnd, msgs);
      case ReflexOldPackage.PROGRAM__PROCESSES:
        return ((InternalEList<?>)getProcesses()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReflexOldPackage.PROGRAM__EN:
        return isEn();
      case ReflexOldPackage.PROGRAM__NAME:
        return getName();
      case ReflexOldPackage.PROGRAM__CLOCK:
        return getClock();
      case ReflexOldPackage.PROGRAM__CONSTS:
        return getConsts();
      case ReflexOldPackage.PROGRAM__ENUMS:
        return getEnums();
      case ReflexOldPackage.PROGRAM__FUNCTIONS:
        return getFunctions();
      case ReflexOldPackage.PROGRAM__PORTS:
        return getPorts();
      case ReflexOldPackage.PROGRAM__PROCESSES:
        return getProcesses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReflexOldPackage.PROGRAM__EN:
        setEn((Boolean)newValue);
        return;
      case ReflexOldPackage.PROGRAM__NAME:
        setName((String)newValue);
        return;
      case ReflexOldPackage.PROGRAM__CLOCK:
        setClock((ClockDefinition)newValue);
        return;
      case ReflexOldPackage.PROGRAM__CONSTS:
        getConsts().clear();
        getConsts().addAll((Collection<? extends Const>)newValue);
        return;
      case ReflexOldPackage.PROGRAM__ENUMS:
        getEnums().clear();
        getEnums().addAll((Collection<? extends ru.iaie.reflexold.reflexOld.Enum>)newValue);
        return;
      case ReflexOldPackage.PROGRAM__FUNCTIONS:
        getFunctions().clear();
        getFunctions().addAll((Collection<? extends Function>)newValue);
        return;
      case ReflexOldPackage.PROGRAM__PORTS:
        getPorts().clear();
        getPorts().addAll((Collection<? extends Port>)newValue);
        return;
      case ReflexOldPackage.PROGRAM__PROCESSES:
        getProcesses().clear();
        getProcesses().addAll((Collection<? extends ru.iaie.reflexold.reflexOld.Process>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReflexOldPackage.PROGRAM__EN:
        setEn(EN_EDEFAULT);
        return;
      case ReflexOldPackage.PROGRAM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ReflexOldPackage.PROGRAM__CLOCK:
        setClock((ClockDefinition)null);
        return;
      case ReflexOldPackage.PROGRAM__CONSTS:
        getConsts().clear();
        return;
      case ReflexOldPackage.PROGRAM__ENUMS:
        getEnums().clear();
        return;
      case ReflexOldPackage.PROGRAM__FUNCTIONS:
        getFunctions().clear();
        return;
      case ReflexOldPackage.PROGRAM__PORTS:
        getPorts().clear();
        return;
      case ReflexOldPackage.PROGRAM__PROCESSES:
        getProcesses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReflexOldPackage.PROGRAM__EN:
        return en != EN_EDEFAULT;
      case ReflexOldPackage.PROGRAM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ReflexOldPackage.PROGRAM__CLOCK:
        return clock != null;
      case ReflexOldPackage.PROGRAM__CONSTS:
        return consts != null && !consts.isEmpty();
      case ReflexOldPackage.PROGRAM__ENUMS:
        return enums != null && !enums.isEmpty();
      case ReflexOldPackage.PROGRAM__FUNCTIONS:
        return functions != null && !functions.isEmpty();
      case ReflexOldPackage.PROGRAM__PORTS:
        return ports != null && !ports.isEmpty();
      case ReflexOldPackage.PROGRAM__PROCESSES:
        return processes != null && !processes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (en: ");
    result.append(en);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ProgramImpl
