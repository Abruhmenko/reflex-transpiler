/**
 * generated by Xtext 2.25.0
 */
package ru.iaie.reflexold.reflexOld.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import ru.iaie.reflexold.reflexOld.ReflexOldPackage;
import ru.iaie.reflexold.reflexOld.UnaryExpression;
import ru.iaie.reflexold.reflexOld.UnaryOp;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Unary Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.UnaryExpressionImpl#isReferenceOp <em>Reference Op</em>}</li>
 *   <li>{@link ru.iaie.reflexold.reflexOld.impl.UnaryExpressionImpl#getUnaryOp <em>Unary Op</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UnaryExpressionImpl extends CastExpressionImpl implements UnaryExpression
{
  /**
   * The default value of the '{@link #isReferenceOp() <em>Reference Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReferenceOp()
   * @generated
   * @ordered
   */
  protected static final boolean REFERENCE_OP_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isReferenceOp() <em>Reference Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReferenceOp()
   * @generated
   * @ordered
   */
  protected boolean referenceOp = REFERENCE_OP_EDEFAULT;

  /**
   * The default value of the '{@link #getUnaryOp() <em>Unary Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnaryOp()
   * @generated
   * @ordered
   */
  protected static final UnaryOp UNARY_OP_EDEFAULT = UnaryOp.PLUS;

  /**
   * The cached value of the '{@link #getUnaryOp() <em>Unary Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnaryOp()
   * @generated
   * @ordered
   */
  protected UnaryOp unaryOp = UNARY_OP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnaryExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReflexOldPackage.Literals.UNARY_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isReferenceOp()
  {
    return referenceOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReferenceOp(boolean newReferenceOp)
  {
    boolean oldReferenceOp = referenceOp;
    referenceOp = newReferenceOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexOldPackage.UNARY_EXPRESSION__REFERENCE_OP, oldReferenceOp, referenceOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryOp getUnaryOp()
  {
    return unaryOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnaryOp(UnaryOp newUnaryOp)
  {
    UnaryOp oldUnaryOp = unaryOp;
    unaryOp = newUnaryOp == null ? UNARY_OP_EDEFAULT : newUnaryOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexOldPackage.UNARY_EXPRESSION__UNARY_OP, oldUnaryOp, unaryOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReflexOldPackage.UNARY_EXPRESSION__REFERENCE_OP:
        return isReferenceOp();
      case ReflexOldPackage.UNARY_EXPRESSION__UNARY_OP:
        return getUnaryOp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReflexOldPackage.UNARY_EXPRESSION__REFERENCE_OP:
        setReferenceOp((Boolean)newValue);
        return;
      case ReflexOldPackage.UNARY_EXPRESSION__UNARY_OP:
        setUnaryOp((UnaryOp)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReflexOldPackage.UNARY_EXPRESSION__REFERENCE_OP:
        setReferenceOp(REFERENCE_OP_EDEFAULT);
        return;
      case ReflexOldPackage.UNARY_EXPRESSION__UNARY_OP:
        setUnaryOp(UNARY_OP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReflexOldPackage.UNARY_EXPRESSION__REFERENCE_OP:
        return referenceOp != REFERENCE_OP_EDEFAULT;
      case ReflexOldPackage.UNARY_EXPRESSION__UNARY_OP:
        return unaryOp != UNARY_OP_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (referenceOp: ");
    result.append(referenceOp);
    result.append(", unaryOp: ");
    result.append(unaryOp);
    result.append(')');
    return result.toString();
  }

} //UnaryExpressionImpl
